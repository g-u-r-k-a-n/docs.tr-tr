### YamlMime:Tutorial
title: "C 'de integral ve kayan nokta numaralarını işleme #"
metadata:
  title: C# ' deki sayılar-C# etkileşimli öğreticiye giriş
  description: Bu öğreticide, sayısal türler hakkında daha etkileşimli olarak C# öğrenmesini sağlamak için tarayıcınızı kullanacaksınız. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: C# dilinde dallar ve döngüler
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f9cfdf852546c30307f818418d7ff610b210d6f4
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88267938"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici, tarayıcınızı kullanarak C# ' deki sayısal türleri etkileşimli olarak öğretir. C# yazar ve kodunuzu derleyip çalıştırmanın sonuçlarını görürsünüz. C# dilinde işlemleri ve matematik işlemlerini inceleyen bir dizi ders bu hızlı başlangıca dahildir. Bu dersler size C# dilinin temel özelliklerini öğretir.
- title: Tamsayı matematiğini inceleme
  durationInMinutes: 4
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. **Odak modunu girin** düğmesini seçin. Ardından, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır**' ı seçin:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Ortamınızda çalışıyorsanız, bunun yerine [Yerel sürümün](numbers-in-csharp-local.md) yönergelerini izlemelisiniz.


    Tamsayılarla temel matematik işlemlerinden birini gördünüz. `int` türü pozitif veya negatif bir **tamsayıyı** ifade eder. Toplama için `+` sembolünü kullanırsınız. Tamsayılar için sıklıkla kullanılan diğer matematiksel işlemler şunlardır:


    - çıkarma için `-`

    - çarpma için `*`

    - bölme için `/`


    > [!TIP]

    > Bu etkileşimli öğreticide, etkileşimli pencerede yazdığınız kodu değiştirerek kendi kendinize araştırma yapabilirsiniz. Bu öğreticide, her adımda deneyebileceğiniz örnekler sağlanmaktadır.


    Bu farklı işlemleri keşfederek başlayın. Bu işlemlerden her birini denemek için üçüncü satırı değiştirin. Her Düzenlemeden sonra **Çalıştır** düğmesini seçin.


    Çıkarma:


    ```csharp

    int c = a - b;

    ```


    Çarpma:


    ```csharp

    int c = a * b;

    ```


    Bölme:


    ```csharp

    int c = a / b;

    ```


    Ayrıca, isterseniz aynı satırda birden çok matematik işlemi yazarak da deneyebilirsiniz.


    > [!TIP]

    > C# dilini (veya herhangi bir programlama dilini) keşfederken, kod yazdığınızda hatalar yapacaksınız. **Derleyici** bu hataları bulup size bildirir. Çıkış, hata iletileri içerdiğinde neyin düzeltilmesi gerektiğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kodunun yapısını öğrenmenize yardımcı olur.
- title: İşlem sırasını inceleme
  durationInMinutes: 7
  content: >
    C# dili, farklı matematik işlemlerinin önceliğini matematikte öğrendiğiniz kurallarla tutarlı bir şekilde tanımlar.

    Çarpma ve bölme işlemleri, toplama ve çıkarma işlemlerinden önce gelir.

    Etkileşimli pencerede aşağıdaki kodu çalıştırarak bunu keşfedin:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Çıkış, çarpma işleminin toplama işleminden önce gerçekleştiğini gösterir.


    İlk gerçekleştirmek istediğiniz işlemin veya işlemlerin etrafına ayraç ekleyerek farklı bir işlem sırası uygulayabilirsiniz:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Birçok farklı işlemi birleştirerek daha fazlasını keşfedin. Yukarıdaki dördüncü satırı şunun gibi bir şeyle değiştirin:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Tamsayılar için farklı bir davranışla karşılaşmış olabilirsiniz. Sonucun ondalık veya kesir bölümü içermesini bekliyor olsanız da tamsayı bölme işlemi her zaman tamsayı sonucu verir.


    Bu davranışı görmediyseniz, aşağıdaki kodu deneyin:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Sonuçları görmek için yeniden **Çalıştır** ' ı seçin.
- title: Tamsayı duyarlığını ve sınırlarını inceleme
  durationInMinutes: 5
  content: >
    Son örnek, tamsayı bölme işleminin sonucu kestiğini size göstermiştir.

    Geri **kalan** işleci, karakterini kullanarak **geri kalanını** alabilirsiniz `%` :


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    C# tamsayı türü diğer bir özelliğiyle matematiksel tamsayılardan farklıdır: `int` türünün alt ve üst sınırları vardır. Bu sınırları görmek için etkileşimli pencerede şu kodu çalıştırın:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Bir hesaplama, bu sınırları aşan bir değer veriyorsa bu, **aşağı taşma** veya **taşma** koşulunuzun olduğu anlamına gelir. Yanıtın bir sınırdan diğerine kaydığı görülüyor. Bir örnek görmek için şu iki satırı etkileşimli pencereye ekleyin:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Yanıtın tam sayı alt sınırına (negatif) oldukça yakın olduğuna dikkat edin. Bu, `min + 2` ile aynıdır.

    Toplama işlemi, tamsayılar için izin verilen değerleri **aşmıştır**.

    Taşma durumu en büyük olası tamsayı değerinden en küçük olana "kaydığından" yanıt oldukça büyük bir negatif sayıdır.


    `int` türü, gereksinimlerinizi karşılamadığında kullanabileceğiniz farklı sınırlar ve duyarlık içeren başka sayısal türler de mevcuttur. Daha sonra bu tür numaraları keşfedelim.
- title: Çift tür ile çalışma
  durationInMinutes: 5
  content: "`double` sayısal türü, çift duyarlıklı kayan noktalı bir sayıyı ifade eder. Bu terimler sizin için yeni olabilir. **Kayan noktalı** sayı, büyüklük açısından oldukça büyük veya küçük olabilen, tamsayı olmayan değerleri ifade etmek için kullanılır. **Çift duyarlık** , değeri depolamak için kullanılan ikili basamakların sayısını açıklayan göreli bir terimdir. **Çift duyarlık** numarası, ikili basamakların sayısının **tek duyarlıklı**olarak iki katına sahiptir. Modern bilgisayarlarda çift duyarlıklı sayı kullanımı, tek duyarlıklı sayılara göre daha yaygındır. **Tek duyarlık** numaraları anahtar sözcüğü kullanılarak belirtilir `float` .\nİnceleyelim mi? Etkileşimli pencerede şu kodu deneyin ve sonuca bakın:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nYanıtın, bölümün ondalık kısmını içerdiğine dikkat edin. Çift değerlerle biraz daha karmaşık bir ifadeyi deneyin:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nÇift değerin aralığı, tamsayı değerlerinden çok daha büyüktür. Etkileşimli pencerede aşağıdaki kodu deneyin:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nBu değerler bilimsel gösterimde yazdırılır. `E` değerinin sol tarafındaki sayı katsayıdır. Sağ taraftaki sayı 10’un bir kuvveti olarak üstür.\n\nMatematikteki ondalık sayılar gibi C# dilindeki çift değerlerde de yuvarlama hataları olabilir. Şu kodu deneyin:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nBunun olduğunu `0.3` `3/10` ve tam olarak aynı olmadığını bilirsiniz `1/3` . Benzer şekilde `0.33` , `33/100` . Bu, ne kadar yakındır `1/3` , ancak yine de tam değildir. \n\n***Sınama***\n\nTürü kullanarak büyük sayılar, küçük sayılar, çarpma ve bölme ile diğer hesaplamaları deneyin `double` .  Daha karmaşık hesaplamalar deneyin.\n"
- title: Ondalık türlerle çalışma
  durationInMinutes: 8
  content: >
    C# dilinde temel sayısal türleri gördünüz: tamsayılar ve çiftler.  Öğreneceğinizi öğrenmek için başka bir tür vardır: `decimal` türü. `decimal` türü, `double` türünden daha küçük bir aralığa ancak daha fazla duyarlığa sahiptir. Şimdi buna bir göz atalım:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Aralığın `double` türünden daha küçük olduğuna dikkat edin. Aşağıdaki kodu deneyerek ondalık türünde daha fazla duyarlık olduğunu görebilirsiniz:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Sayılardaki `M` sonekiyle, bir sabit sayının `decimal` türünü nasıl kullanması gerektiğini belirtirsiniz.


    Ondalık türünün kullanıldığı matematikte, ondalık ayırıcının sağ tarafında daha fazla basamak bulunduğunu görebilirsiniz.


    Sayılardaki `M` sonekiyle, bir sabit sayının `decimal` türünü nasıl kullanması gerektiğini belirtirsiniz. Aksi takdirde, derleyici türü varsayar `double` .


    > [!NOTE]

    > Harf, `M` `double` ve anahtar kelimeleri arasında en görsel olarak ayrı bir harf olarak seçilmiştir `decimal` .


    ***Sınama***


    Farklı sayısal türleri gördüğünüze göre yarı çapı 2,50 santimetre olan bir dairenin alanını hesaplayan kodu yazın. Bir dairenin alanının, yarı çapın karesinin PI sayısı ile çarpımından elde edildiğini unutmayın. İpucu: .NET, PI sayısı için kullanabileceğiniz <xref:System.Math.PI?displayProperty=nameWithType> sabit değerini içerir. <xref:System.Math.PI?displayProperty=nameWithType>, ad alanında belirtilen tüm sabitler gibi `System.Math` bir `double` değerdir. Bu nedenle, `double` `decimal` Bu zorluk için değer yerine kullanmanız gerekir.


    19 ile 20 arasında bir yanıt almanız gerekir.
- title: Görevi tamamlama
  durationInMinutes: 1
  content: >
    Şunun gibi bir şeyle karşılaştınız mı?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Dilerseniz diğer formüllerden de deneme yapabilirsiniz.
- content: "\"C# dilinde sayılar\" Etkileşimli öğreticisini tamamladınız. Sonraki etkileşimli öğreticiye başlamak için aşağıdaki **dallar ve döngüler** bağlantısını seçebilir veya [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret ederek .NET Core SDK indirebilir, makinenizde bir proje oluşturabilir ve kodlamaya devam edebilirsiniz. \"Sonraki adımlar\" bölümü, sizi bu öğreticilere geri getirir.\n\nAşağıdaki makalelerde C# dilinde sayılar hakkında daha fazla bilgi edinebilirsiniz:\n\n- [Tamsayı sayısal türler](../../language-reference/builtin-types/integral-numeric-types.md)\n- [Kayan nokta sayısal türleri](../../language-reference/builtin-types/floating-point-numeric-types.md)\n- [Yerleşik sayısal dönüşümler](../../language-reference/builtin-types/numeric-conversions.md)"
