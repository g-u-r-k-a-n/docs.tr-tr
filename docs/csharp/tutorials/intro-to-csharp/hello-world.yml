### YamlMime:Tutorial
title: Merhaba Dünya- C# etkileşimli C# öğreticiye giriş
metadata:
  title: Merhaba Dünya- C# etkileşimli C# öğreticiye giriş
  description: Bu öğreticide, etkileşimli olarak öğrenmek C# için tarayıcınızı kullanacaksınız. Kod yazar C# ve kodunuzu doğrudan tarayıcıda derleyip çalıştırmanın sonuçlarını görürsünüz.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: C# numaraları
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 365cf0b2ef36dd0be624d022e3dea5e16a9eb58c
  ms.sourcegitcommit: f348c84443380a1959294cdf12babcb804cfa987
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 11/12/2019
  ms.locfileid: "73969418"
items:
- durationInMinutes: 1
  content: >
    Bu öğreticide, C# kodunuzu derleyip çalıştırmanın sonuçlarını yazmak C# ve görüntülemek için tarayıcınızı kullanarak etkileşimli olarak öğretilir. Bir "Merhaba Dünya" programıyla başlayan bir dizi ders içerir. Bu dersler, C# dilin temellerini öğretir.
- title: İlk C# programınızı çalıştırma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. **Odak modunu girin** düğmesini seçin. Ardından, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır**' ı seçin:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Mühendisi! İlk C# programınızı çalıştırdık. Bu, "Merhaba Dünya!" iletisini yazdıran basit bir programdır. Bu iletiyi yazdırmak için <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> yöntemini kullandı. `Console`, konsol penceresini temsil eden bir türdür. `WriteLine`, metin konsoluna metin satırı yazdıran `Console` türünün bir yöntemidir.


    Daha fazlasını taşıyıp daha fazla inceleyelim. Bu dersin geri kalanı, içindeki C#metni temsil eden `string` türüyle çalışmayı araştırır. `Console` türü gibi `string` türünün yöntemleri vardır. `string` yöntemleri metinle birlikte çalışır.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Değişkenleri bildirme ve kullanma
  durationInMinutes: 3
  content: >
    İlk programınız "Merhaba Dünya!" `string` yazdırıldı ekranda.


    > [!TIP]

    > Keşfederken C# (veya herhangi bir programlama dilini), kod yazarken hata oluşturursunuz. **Derleyici** bu hataları bulacak ve size rapor eder. Çıktı hata iletileri içerdiğinde, nelerin düzeltileceğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kod yapısını öğrenmenize yardımcı olur.


    İlk programınız bir ileti yazdırmaya sınırlandırılmıştır. **Değişkenleri**kullanarak daha kullanışlı programlar yazabilirsiniz. **Değişken** , aynı kodu farklı değerlerle çalıştırmak için kullanabileceğiniz bir simgedir. Deneyelim! Etkileşimli pencerede yazdığınız kodu aşağıdaki kodla değiştirin:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    İlk satır bir değişken bildirir, `aFriend` ve bir "fatura" değeri atar. İkinci satır, adı yazdırır.


    Bildirdiğiniz herhangi bir değişkene farklı değerler atayabilirsiniz. Adı arkadaşlarınızla birine dönüştürebilirsiniz. Bu iki satırı, zaten eklemiş olduğunuz kodu izleyerek etkileşimli pencereye ekleyin:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Aynı kod satırının `aFriend` değişkeninde depolanan değere göre iki farklı ileti yazdırdığına dikkat edin.


    Ayrıca, son iki iletinin "Hello" sözcüğünün eksik olduğunu fark etmiş olabilirsiniz. Şimdi bunu düzeldelim.  İletiyi şu şekilde yazdıracak satırları değiştirin:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Sonuçları görmek için yeniden **Çalıştır** ' ı seçin.


    **Değişkenlerden** ve **sabit** dizelerdeki dizeleri derlemek için `+` kullanıyorsunuz. Daha iyi bir yoldur.

    Metnin değişkenin değeriyle değiştirilmesini söylemek C# için `{` ve `}` karakterleri arasına bir değişken yerleştirebilirsiniz.


    Bu, [dize ilişkilendirme](../../language-reference/tokens/interpolated.md)olarak adlandırılır.


    Dizenin açılış tırnağından önce bir `$` eklerseniz, küme ayraçları arasındaki dizenin içinde `aFriend`gibi değişkenleri ekleyebilirsiniz. Deneyin:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Sonuçları görmek için yeniden **Çalıştır** ' ı seçin. "Merhaba {aFriend}" yerine ileti "Hello Maira" olmalıdır.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Dizelerle çalışma
  durationInMinutes: 5
  content: >
    Son düzenlemeniz, dizelerle yapabileceklerinize ilk bakmıştı. Daha fazlasını inceleyelim.


    Küme ayraçları arasında tek bir değişkenle sınırlı değilsiniz. Şunu deneyin:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Dizelerle daha fazlasını keşfettireceğiz, dizelerin bir harf koleksiyonundan daha fazla olduğunu fark edeceksiniz. `Length`kullanarak bir dizenin uzunluğunu bulabilirsiniz. `Length` bir dizenin **özelliğidir** ve bu dizedeki karakter sayısını döndürür. Aşağıdaki kodu etkileşimli pencerenin altına ekleyin:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Bu, kendi kendinize araştırmak için iyi bir zamandır. `Console.WriteLine()` ekrana metin yazdığınızı öğrendiniz. Değişkenleri bildirme ve dizeleri birlikte birleştirme hakkında daha fazla öğrendiniz. Etkileşimli pencerede deneyin. Pencerede, **IntelliSense** adlı bir özellik bulunur ve yapabilecekleriniz için öneriler sağlar. `firstFriend``d` sonra `.` yazın. Kullanabileceğiniz özellikler ve yöntemler için önerilerin bir listesini görürsünüz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Dizelerle daha fazlasını yapın
  durationInMinutes: 5
  content: >
    İletileri yazdırmak için <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>bir **Yöntem**kullanıyorsunuz. **Yöntemi** , bazı eylemleri uygulayan bir kod bloğudur. Bir ada sahip olduğundan, ona erişebilirsiniz.


    Dizelerinizin görüntülenmesini istemediğiniz baştaki veya sondaki boşlukların olduğunu varsayalım. Dizelerin içindeki boşlukları **kırpmak** istiyorsunuz.

    <xref:System.String.Trim%2A> yöntemi ve ilgili yöntemler <xref:System.String.TrimStart%2A> ve <xref:System.String.TrimEnd%2A> işler. Baştaki ve sondaki boşlukları kaldırmak için yalnızca bu yöntemleri kullanabilirsiniz. Aşağıdaki kodu deneyin:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Bu örnek, dizeler ile çalışmaya yönelik birkaç önemli kavramı güçlendirir. Dizeleri işleyen yöntemler, değişiklikleri yerinde yapmak yerine yeni dize nesneleri döndürür. `Trim` metotlarından birine yapılan her çağrının yeni bir dize döndürdüğünü, ancak özgün iletiyi değiştirmediğini görebilirsiniz.


    Bir dizeyle çalışmak için kullanılabilecek başka yöntemler vardır. Örneğin, büyük olasılıkla bir düzenleyicide veya Word işlemcisinde bir arama ve değiştirme komutu kullandınız. <xref:System.String.Replace%2A> yöntemi bir dizedeki benzer bir şey yapar. Bir alt dizeyi arar ve farklı bir metinle değiştirir. <xref:System.String.Replace%2A> yöntemi iki **parametre**alır. Bunlar parantez arasındaki dizelerdir. İlk dize, aranacak metindir. İkinci dize, ile değiştirilecek metindir. Kendiniz deneyin. Bu kodu ekleyin. `sayHello` değişkenden sonra `.Re` yazmaya başladığınızda ipuçlarına bakmak için yazın:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Diğer iki yararlı yöntem, bir dizeyi tümüyle büyük veya küçük harf yapar. Aşağıdaki kodu deneyin. **IntelliSense** 'in `To`yazarken nasıl ipuçları sağladığını görmek için yazın:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Dizeleri arama
  durationInMinutes: 10
  content: >
    *Arama ve değiştirme* işleminin diğer bölümü bir dizedeki metni bulmasından oluşur. Arama için <xref:System.String.Contains%2A> yöntemini kullanabilirsiniz. Bir dize bunun içinde bir alt dize içerip içermeyeceğini söyler. <xref:System.String.Contains%2A>araştırmak için aşağıdaki kodu deneyin:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    <xref:System.String.Contains%2A> yöntemi, aradığınız dize bulunursa size söyleyen bir **Boole** değeri döndürür. **Boolean** bir `true` veya `false` değeri depolar. Daha sonraki bir derste **Boolean** değerler hakkında daha fazla bilgi edineceksiniz.


    ***Sına***


    Aynı zamanda bir dizedeki alt dizeleri de arayacak <xref:System.String.StartsWith%2A> ve <xref:System.String.EndsWith%2A> iki benzer yöntem vardır. Bu, dizenin başında veya sonunda bir alt dize bulur. Önceki örneği <xref:System.String.Contains%2A>yerine <xref:System.String.StartsWith%2A> ve <xref:System.String.EndsWith%2A> kullanacak şekilde değiştirmeyi deneyin. Bir dizenin başlangıcında "Siz" veya "güle" araması yapın. Bir dizenin sonunda "Merhaba" veya "güle" araması yapın.


    > [!NOTE]

    > Dizenin sonundaki metni test ettiğinizde noktalarınızı izleyin. Dize bir noktayla biterdiğinde, noktayla biten bir dizeyi denetlemeniz gerekir.


    "Siz" ile başlayıp "Merhaba" ile başlayıp "güle" ile başlamak için yanlış `true` almalısınız.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Sınama Tamam
  durationInMinutes: 3
  content: >
    Bunun gibi bir konuyla karşılaştınız mı?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- content: >-
    C# Öğreticiye "Merhaba C#" giriş sayfasını tamamladınız. Sonraki etkileşimli öğreticiye başlamak için aşağıdaki bağlantıdan ** C# numaraları** seçebilirsiniz veya .NET Core SDK indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz. "Sonraki adımlar" bölümü, sizi bu öğreticilere geri getirir.


    `string` türü hakkında daha fazla bilgi için:

    - [Dizeler hakkında](../../programming-guide/strings/index.md)Programlama Kılavuzu konusu. [ C# ](../../programming-guide/index.md)

    - [Dizelerle çalışma hakkında ipuçları](../../how-to/index.md#working-with-strings).
