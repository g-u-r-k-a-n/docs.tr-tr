### YamlMime:Tutorial
title: Biçimlendirilen dizeler oluşturmak için dize ilişkilendirmeyi kullanın
metadata:
  title: Dize ilişkilendirme- C# Etkileşimli öğretici
  description: Bu öğreticide, C# dize ilişkilendirme özelliğini etkileşimli olarak araştırmak için tarayıcınızı kullanacaksınız. Kod yazar C# ve kodunuzu doğrudan tarayıcıda derleyip çalıştırmanın sonuçlarını görürsünüz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 460accc4f0877265a5a3d72ad3272502da9e5119
  ms.sourcegitcommit: 559259da2738a7b33a46c0130e51d336091c2097
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 10/22/2019
  ms.locfileid: "72774039"
items:
- durationInMinutes: 2
  content: >
    Bu öğretici, tek bir dizeye değerler eklemek için [dize ilişkilendirmeyi](../../language-reference/tokens/interpolated.md) nasıl kullanacağınızı öğretir. Sonuç dizesinin metin biçimlendirmesini nasıl denetleyeceğinizi de öğreneceksiniz. Kodu yazmak ve çalıştırmak C# için tarayıcınızı kullanırsınız ve sonuçları hemen görebilirsiniz.
- title: Enterpolasyonlu dize oluşturma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Bunu yapmak için etkileşimli pencereye kodu yazın (`<name>` adınızla değiştirin) ve **Çalıştır**' ı seçin:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Kodu çalıştırdığınızda, **Çıkış** , selamdaki adınızı içeren bir dize görüntüler. <xref:System.Console.WriteLine%2A> yöntemi çağrısının dize bağımsız değişkeni, bir *enterpolasyonlu dize ifadesidir*. Katıştırılmış kodu içeren bir dizeden tek bir dize ( *sonuç dizesi*olarak adlandırılır) oluşturmanıza imkan tanıyan bir şablon türüdür. Enterpolasyonlu dize ifadeleri, bir dizeye değer eklemek veya birkaç dizeyi birleştirmek (birlikte birleştirmek) için özellikle faydalıdır.


    Yukarıdaki örnek, her bir enterpolasyonlu dize ifadesinin sahip olması gereken iki öğeyi içerir:


    - Açılış tırnak işareti karakterinden önce `$` karakteriyle başlayan bir dize sabit değeri. @No__t_0 simgesiyle tırnak işareti karakteri arasında boşluk olamaz. (Bir tane eklerseniz ne olacağını görmek isterseniz, etkileşimli penceredeki `$` karakterden sonra bir boşluk ekleyin ve güncelleştirilmiş kodu çalıştırın. C# Derleyici şikayetleri, "beklenmeyen karakter ' $ '".)


    - Bir veya daha fazla *ilişkilendirme ifadesi*. Enterpolasyon ifadesi bir açma ve kapatma ayracı (`{` ve `}`) ile belirtilir. Küme ayraçlarının içinde C# (`null` dahil) bir değer döndüren herhangi bir ifadeyi yerleştirebilirsiniz.


    Biraz daha farklı veri türleriyle daha fazla dize ilişkilendirme örneği deneyelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Farklı veri türleri dahil et
  durationInMinutes: 5
  content: >
    Önceki adımda, bir dizeyi diğerinin içine eklemek için dize ilişkilendirmeyi kullandınız. Bir enterpolasyonlu dize ifadesinin parçası olan her ilişkilendirme ifadesi herhangi bir veri türünde olabilir, ancak. Enterpolasyonlu bir dizedeki çeşitli veri türü ifadelerinin değerlerini ekleyelim.


    Aşağıdaki örnekte, ilk olarak `Name`, `Price`ve `perPackage` üyelerine sahip bir [tanımlama grubu](../../tuples.md) tanımladık. Etkileşimli pencerede aşağıdaki kodu çalıştırın:


    ```csharp

    var item = (Name: "eggplant", Price: 1.99m, perPackage: 3);

    var date = DateTime.Now;

    Console.WriteLine($"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.");

    ```


    Enterpolasyonlu dizedeki enterpolasyon ifadesinin `item.Price`, sonuç dizesinde "1,99" metni olarak çözümlendiğine unutmayın. Yani, ifade sonucunun türü bir dize olmadığında, sonuç aşağıdaki şekilde bir dizeye çözülür:


    - Enterpolasyon ifadesi `null` olarak değerlendirilirse, boş bir dize ("" veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.


    - Enterpolasyon ifadesi `null`olarak değerlendirilmiyorsa, genellikle sonuç ifadesinin `ToString` yöntemi çağrılır.


    Bu örnekteki çıktıda, tarih çok kesin (eggbitki fiyatı her saniye değişmez) ve fiyat değeri bir para birimi göstermez. Sonraki adımda, ifade sonuçlarının dize gösterimlerini denetleyerek bu sorunları nasıl giderebileceğinizi öğreneceksiniz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Enterpolasyon ifadelerinin biçimlendirmesini denetleme
  durationInMinutes: 5
  content: >
    Önceki adımda, sonuç dizesine hatalı biçimli iki dize eklenmiştir. Bunlardan biri, yalnızca tarihin uygun olduğu tarih ve saat değeridir. İkincisi, para birimi birimini göstermediğiniz bir fiyattır. Her iki sorunun de kolay bir şekilde ele alınır. Dize ilişkilendirme, belirli türlerin biçimlendirilmesini denetleyen *Biçim dizelerini* belirtmenize olanak tanır. Aşağıdaki satırda gösterildiği gibi, tarih ve fiyat ifadelerinin biçim dizelerini dahil etmek için önceki örnekteki `Console.WriteLine` çağrısını değiştirin:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    Bir biçim dizesini, iki nokta üst üste (":") ve biçim dizesiyle birlikte enterpolasyon ifadesini izleyerek belirtirsiniz. "d", kısa tarih biçimini temsil eden [Standart bir tarih ve saat biçim dizesidir](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) . "C2", ondalık ayırıcıdan sonraki iki basamakla para birimi değeri olarak bir sayıyı temsil eden [Standart bir sayısal biçim dizesidir](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) .


    .NET kitaplıklarında bulunan birçok tür, önceden tanımlanmış bir biçim dizeleri kümesini destekler. Bunlar, tüm sayısal türleri ve Tarih ve saat türlerini içerir. Biçim dizelerini destekleyen türlerin tüm listesi için bkz. [.net makalesindeki biçimlendirme türleri](../../../standard/base-types/formatting-types.md) ' nde [Biçim dizeleri ve .NET sınıf kitaplığı türleri](../../../standard/base-types/formatting-types.md#format-strings-and-net-types) .


    Tarih ve saat ve sayısal değer biçimlendirmesini nasıl etkilediğini görmek için örnekteki biçim dizelerini değiştirmeyi deneyin. @No__t_0 içindeki "d" öğesini "t" olarak değiştirin (kısa saat biçimini göstermek için), "y" (yılı ve ayı göstermek için) ve "yyyy" (yılı dört basamaklı bir sayı olarak göstermek için). @No__t_0 içindeki "C2" öğesini "e" (üstel gösterim için) ve "F3" (ondalık ayırıcıdan sonra üç basamaklı bir sayısal değer için) olarak değiştirin.


    Biçimlendirmeyi denetlemenin yanı sıra, sonuç dizesinde bulunan biçimlendirilmiş dizelerin alan genişliğini ve hizalamasını da denetleyebilirsiniz. Sonraki adımda bunu nasıl yapacağınızı öğreneceksiniz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Enterpolasyon ifadelerinin alan genişliğini ve hizalamasını denetleme
  durationInMinutes: 6
  content: >
    Normalde, bir enterpolasyonlu dize ifadesinin sonucu dize olarak biçimlendirildiğinde, bu dize öndeki veya sondaki boşluklar olmadan bir sonuç dizesine dahil edilir. Özellikle bir veri kümesiyle çalışırken, alan genişliğini denetleyebilmekte ve metin hizalaması daha okunabilir bir çıktı oluşturulmasına yardımcı olur. Bunu görmek için aşağıdaki kodu çalıştırın:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Öğe adları sola hizalanır ve miktarları sağa hizalanır. Bir ilişkilendirme ifadesinden sonra bir virgül (",") ekleyerek ve *en az* alan genişliğini belirterek hizalamayı belirlersiniz. Belirtilen değer pozitif bir sayıysa, alan sağa hizalanır. Negatif bir sayı ise, alan sola hizalanır.


    `{"Item",-25}` ve `{item.Key,-25}` koddan negatif işaretleri kaldırmayı deneyin ve örneği yeniden çalıştırın. Bu kez, öğe adları sağa hizalanır.


    Tek bir ilişkilendirme ifadesi için bir hizalama belirleyicisi ve biçim dizesi birleştirebilirsiniz. Bunu yapmak için önce hizalamayı, ardından iki nokta üst üste ve biçim dizesini belirtin. Tanımlı alan genişlikleri olan üç biçimli dizeyi görüntüleyen aşağıdaki kodu deneyin:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- content: >-
    Dize ilişkilendirme etkileşimli öğreticisini tamamladınız. Sonraki etkileşimli öğreticiye başlamak için aşağıdaki LINK **içindeki C# koleksiyonlara** tıklayabilirsiniz veya .NET Core SDK indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz. "Sonraki adımlar" bölümü, sizi bu öğreticilere geri getirir.


    Daha fazla bilgi için bkz. [dize ilişkilendirme](../../language-reference/tokens/interpolated.md).
