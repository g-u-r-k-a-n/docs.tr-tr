### YamlMime:Tutorial
title: Dal ve döngü deyimleri ile koşullu mantığı öğrenin
metadata:
  title: Şubeler ve döngüler - C# etkileşimli öğreticiye giriş
  description: Dallar ve döngüler hakkındaki bu öğreticide, C# etkileşimli olarak öğrenmek için tarayıcınızı kullanırsınız. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Liste koleksiyonu
  ms.openlocfilehash: ab709b6b30b5a173e2faf08b577e4d7a3d9a9034
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969422"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici, değişkenleri inceleyen ve bu değişkenleri temel alan yürütme yolunu değiştiren kod yazmayı öğretir. Etkileşimli olarak C# kodu yazmak için tarayıcınızı kullanırsınız ve kodunuzu derleyip çalıştırmanın sonuçlarını görürsünüz. Bu öğretici, C#'daki dallanma ve döngü yapılarını inceleyen bir dizi ders içerir. Bu dersler size C# dilinin temel özelliklerini öğretir.
- title: If deneyimini kullanarak karar verme
  durationInMinutes: 4
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Odak **modunu gir düğmesini** seçin. Ardından, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır'ı**seçin:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Bunu ortamınızda çalıştırıyorsanız, bunun yerine yerel [sürüm](branches-and-loops-local.md) için yönergeleri izlemeniz gerekir.


    `b` tanımlamasını toplamın 10’dan küçük olacağı şekilde değiştirin:


    ```csharp

    int b = 3;

    ```


    **Çalıştır** düğmesini yeniden seçin. Yanıt 10’dan küçük olduğundan herhangi bir şey yazdırılmaz. Test ettiğiniz **koşul** false değerindedir. Bir `if` deyimi için olası dallardan yalnızca birini (true dalı) yazdığınızdan, yürütülecek herhangi bir kodunuz yoktur.


    > [!TIP]

    > C# dilini (veya herhangi bir programlama dilini) keşfederken, kod yazdığınızda hatalar yapacaksınız. **Derleyici** bu hataları bulup size bildirir. Çıkış, hata iletileri içerdiğinde neyin düzeltilmesi gerektiğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kodunun yapısını öğrenmenize yardımcı olur.


    İlk örnek `if` kuvvetini ve boole türlerini gösterir. *Boole*, iki değerden birine sahip olabilen bir değişkendir: `true` veya `false`. C#, boole değişkenleri için özel `bool` türünü tanımlar. `if` deyimi bir `bool` için değeri kontrol eder. Değer `true` olduğunda, `if` deyiminden sonra gelen deyim yürütülür. Aksi halde atlanır.


    Koşulları kontrol etmek ve bu koşullara göre deyimleri yürütmek için gerçekleştirilen bu işlem son derece etkilidir. Şimdi daha fazlasını keşfedelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: if ve else koşullarını birlikte çalıştırma
  durationInMinutes: 10
  content: "\nHem true hem de false dallarında farklı kod yürütmek için, koşul false olduğunda yürütülen bir `else` dalı oluşturursunuz. Şunu deneyin:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n`else` anahtar sözcüğünden sonraki deyim, yalnızca test edilen koşul `false` olduğunda yürütülür. `if` ve `else` koşullarını boole koşullarıyla birleştirmek, ihtiyacınız olan tüm etkiyi sunar.\n\n> [!IMPORTANT]\n> `if` ve `else` deyimlerinin altındaki girinti, insan okuyuculara yöneliktir.\n> C# dili girinti veya beyaz boşluk önemli olarak tedavi etmez.\n> `if` veya `else` anahtar sözcüğünden sonra gelen deyim, koşula bağlı olarak yürütülür. Bu öğreticideki tüm örnekler, deyimlerin denetim akışına dayalı girintisi satırlara yönelik yaygın bir uygulamayı izler.\n\nGirinti dikkate alınmadığından, koşullu olarak yürütülen bloğun birden çok deyim içermesini istediğinizde bunu belirtmek için `{` ve `}` ayraçlarını kullanmanız gerekir. C# programcıları bu ayraçları genellikle tüm `if` and `else` tümcelerinde kullanır. Aşağıdaki örnek, biraz önce oluşturduğunuz örnekle aynıdır. Deneyin.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Bu öğreticinin geri kalanı boyunca, kod örneklerinin tümü, kabul edilen uygulamaları izleyerek parantezleri içerir.\n\nDaha karmaşık koşulları test edebilirsiniz:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\nEşitlik `==` *için*sembol testleri. Kullanmak, `==` eşitlik için testi atamadan ayırır, `a = 5`bunu ' da gördüğünüz.\n\n`&&` \"ve\" sözcüğünü ifade eder. Bu, deyimi true dalında yürütmek için her iki koşulun da true olması gerektiği anlamına gelir.  Bu örnekler aynı zamanda, `{` ve `}` ayraçları içine alınmaları koşuluyla her koşullu dalda birden çok deyime sahip olabileceğinizi de gösterir.\n\n“veya” sözcüğünü ifade etmek için `||` işaretini de kullanabilirsiniz:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n`a`, `b`ve `c` , ve arasında `&&` geçiş `||` ve keşfetmek için değerlerini değiştirin. Operatörlerin ve `&&` `||` operatörlerin nasıl çalıştığını daha iyi anlayasınız.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).\n"
- title: İşlemleri yinelemek için döngüleri kullanma
  durationInMinutes: 6
  content: >
    Daha büyük programlar oluşturmanın diğer bir önemli kavramı da **döngülerdir**. Birçok kez yürütülmesini istediğiniz deyimleri yinelemek için döngüleri kullanırsınız. Bu kodu etkileşimli pencerede deneyin:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    `while` deyimi bir koşulu kontrol eder ve deyimi `while` deyiminden sonra yürütür. Koşul false olana kadar koşulu kontrol etmeyi ve bu deyimleri yürütmeyi yineler.


    Bu örnekte diğer bir yeni işleç mevcuttur. `counter` değişkeninden sonra gelen `++`, **artırma** işlecidir. Sayacın değerine 1 ekler ve bu değeri sayaç değişkeninde depolar.


    > [!IMPORTANT]

    > Siz kodu yürütürken `while` döngüsü koşulunun false olarak değiştiğinden emin olun. Aksi halde, programınızın hiç sona ermediği **sonsuz bir döngü** oluşturmuş olursunuz. Kodunuzu çalıştıran altyapı, zaman aşımına uğrayacağından ve programınıza ait bir çıkış görmeyeceğinizden bunu göstermemiz gerekmez.


    `while` döngüsü, `while` koşulundan sonraki kodu yürütmeden önce koşulu test eder. `do` ... `while` döngüsü önce kodu yürütür, sonra koşulu kontrol eder. Şu şekilde görünür:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Bu `do` döngüsü ve daha önceki `while` döngüsü aynı şekilde çalışır.


    Şimdi son döngü deyimine geçelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: For döngüsü ile çalışma
  durationInMinutes: 5
  content: >
    C# kodunda göreceğiniz, sık kullanılan diğer bir döngü deyimi de `for` döngüsüdür. Bu kodu etkileşimli pencerede deneyin:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Bu, `while` döngüsü ve zaten kullandığınız `do` döngüsü ile aynı işlevi görür. `for` deyiminde, bunu nasıl çalıştığını denetleyen üç bölüm bulunur.


    İlk bölüm **için başharf**: `int counter = 0;` döngü `counter` değişkeni olduğunu bildirir ve ilk `0`değerini ayarlar.


    Orta kısım **for koşuldur**: `counter < 10` sayacın değeri 10'dan küçük olduğu sürece bu `for` döngünün yürütmeye devam ettiğini bildirir.


    Son bölüm **iterator için** `counter++` : `for` deyimi izleyen blok çalıştırdıktan sonra döngü değişkeninin nasıl değiştirilebildiğini belirtir. Bu bölüm, bloğun her yürütme işleminde `counter` değişkeninin 1 artırılması gerektiğini belirtir.


    Bunları kendiniz deneyin. Aşağıdakilerden her birini deneyin:


    - Farklı bir değerde başlamak için başlatıcıyı değiştirin.

    - Farklı bir değerde durmak için koşulu değiştirin.


    İşiniz bittiğinde öğrendiklerinizi kullanmak için kendi kendinize kod yazma adımına geçelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Dalları ve döngüleri birleştirme
  durationInMinutes: 12
  content: >
    C# dilinde `if` deyimini ve döngü yapılarını gördüğünüze göre şimdi 1 ile 20 arasında olup 3’e bölünebilen tüm tamsayıların toplamını bulmak için C# kodu yazmayı deneyin.  Aşağıdaki ipuçlarından yararlanabilirsiniz:


    - `%` işleci size bölme işlemindeki kalanı verir.

    - `if` deyimi bir sayının toplama dahil edilip edilmemesi gerektiğini görmeniz için size koşulu verir.

    - `for` döngüsü 1 ile 20 arasındaki tüm sayılar için bir dizi adımı yinelemenize yardımcı olur.


    Kendiniz deneyin. Daha sonra başarılı olup olmadığınıza bakın. İpucu olarak, yanıtta 63’ü bulmanız gerekir.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Görevi tamamlama
  durationInMinutes: 1
  content: >
    Şunun gibi bir şeyle karşılaştınız mı?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Tebrikler!
  content: "\"Dallar ve döngüler\" etkileşimli eğitimini tamamladınız. Bir sonraki etkileşimli öğreticiyi başlatmak için aşağıdaki **liste toplama** bağlantısını seçebilir veya .NET Core SDK'yı indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.NET sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz. \"Sonraki adımlar\" bölümü sizi bu öğreticilere geri getirir.\n\nAşağıdaki konulardan bu kavramlar hakkında daha fazla bilgi edinebilirsiniz:\n\n- [If ve else deyimi](../../language-reference/keywords/if-else.md)\n- [İfade iken](../../language-reference/keywords/while.md)\n- [Do deyimi](../../language-reference/keywords/do.md)\n- [İfade için](../../language-reference/keywords/for.md)"
