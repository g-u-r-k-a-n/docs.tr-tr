### YamlMime:Tutorial
title: C# 6 - C# interaktif C# öğreticisini keşfedin
metadata:
  title: C# 6'yı keşfedin - Tarayıcınızı kullanarak C# 6'daki yeni özellikleri interaktif olarak deneyin
  description: Bu eğitimde, C# 6'yı etkileşimli olarak keşfetmek için tarayıcınızı kullanacaksınız. Daha kısa ve okunabilir kod sağlayan C# 6 ile kullanabileceğiniz yeni deyimleri keşfedeceksiniz.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 45f76b4d0df32436e5ae8e252cae80c7a63d5e36
  ms.sourcegitcommit: d9470d8b2278b33108332c05224d86049cb9484b
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 04/17/2020
  ms.locfileid: "81607460"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici, C# yazmak için tarayıcınızı kullanarak C# 6'yı etkileşimli olarak keşfetmenizi ve kodunuzu derlemeve çalıştırmanın sonuçlarını görmenizi sağlar. Daha önceki C# uygulamalarını daha yeni, daha kısa C# 6 özelliklerini kullanmak için değiştiren bir dizi ders içerir. Bu makalenin geri kalanı, her özelliği keşfetmek için bir bağlantı ile, bu özelliklerin her biri genel bir bakış sağlar.
- title: Salt okunur otomatik özellikleri yalnızca okunur türleri etkinleştirin
  durationInMinutes: 2
  content: "Otomatik özellik sözdizimi için iki geliştirme, otomatik özellikleri daha fazla yerde kullanmayı kolaylaştırır: salt okunur otomatik özellikler ve otomatik özellik başlatılması. Bu küçük programı göz önünde bulundurun:\n\n[!code-csharp[Starter](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Odak moduna girin, önceki kodu C# etkileşimli penceresine kopyalayın. Ardından, kodun ne yaptığını görmek için *Çalıştır'ı* seçin. `AllCaps`büyük harf dizesini döndürme ile birlikte özellik değerlerini değiştirmenin istenmeyen yan etkisi vardır. `Person` Sınıfın yazarı dizeleri için `FirstName` ve `LastName` salt okunur olması amaçlanmıştır. C# 6 ile bu niyeti açıkça belirtebilirsiniz. `private set` Salt okunur otomatik özellik oluşturmak için her iki özelliği de kaldırın. Derleyicinin iki konumu `FirstName` ve `LastName` özelliklerinin değişmemesi gerekirken değiştirildiğini görmek için *Çalıştır'ı* seçin. Derleyici hatasını düzeltmek için `AllCaps` yöntemi aşağıdaki kodla değiştirebilirsiniz:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nDerleyici, bu yeni sözdizimini kullanarak özelliklerin değişmez olmasını sağlar.\n"
- title: Otomatik özellikler için destek alanlarını başlatma
  durationInMinutes: 1
  content: "C# 6'daki yeni sözdizimi, otomatik özellikler için baş harflerini kullanmanızı sağlar. Sınıflar yeni yetenekler büyüdükçe bu daha da önemli hale gelir. Bir göbek adı özelliği ve sınıfınıza `Person` üç dize alan yeni bir oluşturucu ekleyin:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\nMülkteki `MiddleName` atama bir baş harftir. Bu, göbek adı için derleyici tarafından oluşturulan destek alanını başharfe döndürür.\n"
- title: İfade gövdeli üyeler
  durationInMinutes: 2
  content: >
    İfade gövdeli üyeler, hafif yöntemler için hafif bir sözdizimi sağlar. Sınıfın `Person` iki harika adayı var. Aşağıdakilerin bildirimine `ToString`bakın:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Bu bildirimi `ToString` aşağıdaki kodla değiştirin:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    `AllCaps` Yöntem ile aynı deneyin. Bu küçük bir gelişmedir, ancak akıllıca kullanıldığında, özellikle Veri Aktarım Nesneleri (DTO' lar) ve en az davranışla diğer türler için çok daha okunabilir kod oluşturur.
- title: Tek bir sınıf alma
  durationInMinutes: 2
  content: "Bir sınıfın statik yöntemlerini kodunuzun her birinde sınıf adı da dahil olmak üzere sürekli olarak kullanırsanız, kodunuzu zedebilirsiniz. Sınıf, `Person` yalnızca `System` <xref:System.Console?displayProperty=nameWithType> kullanılsa bile ad alanını şu anda içe doğru iter. İfadeyi `using` aşağıdaki gibi değiştirin:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\nDeyim, `static using` [`string`](xref:System.String) sınıf veya <xref:System.Math?displayProperty=nameWithType> sınıf gibi birçok statik yöntemle tek bir sınıfın kapsamlı kullanımını sağlayan daha büyük programlarda daha kullanışlı hale gelir.\n"
- title: Daha iyi bir dize biçimi
  durationInMinutes: 2
  content: "C# 6, diğer dize değerlerini oluşturmak için değerlendirilen bir dize ve közlenmiş ifadelerden dizeleri oluşturmak için yeni sözdizimi içerir. Bu sözdizimini kullanmak için yöntemleri `ToString` ve `AllCaps` yöntemleri değiştirebilirsiniz:\n\n[!code-csharp[StringInterpolation](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n`{` \"ve `}`, doğrudan C# ifadeleri\" arasındaki konumsal bağımsız değişkenler yerine. Yöntemde `Main` de aynısını yapabilirsiniz. Varolan kodu aşağıdakilerle değiştirin:\n\n[!code-csharp[InterpolationMain](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nBu ifadelerde tek bir değişkenle sınırlı değil. Yeni bir örnekle başlayalım ve dize enterpolasyonu yla kullanabileceğiniz diğer ifadeleri göstermek için değiştirelim. Yöntemde etkileşimli pencereye aşağıdaki `Main` kodu yapıştırın:\n\n[!code-csharp[Phrases](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \nBu linq kullanır, bu nedenle etkileşimli pencerenin üstüne aşağıdaki kullanarak deyimi eklemeniz gerekir:\n\n```csharp\nusing System.Linq;\n```\n\nYerel değişkeni `average` kaldırabilir ve bu hesaplamayı enterpolasyonlu dize ifadesinin bir parçası olarak gerçekleştirebilirsiniz. Son iki satırı aşağıdakilerle değiştirin:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nÖnceki örneği çalıştırdığınızda, çıktının istediğinizden daha fazla ondalık basamak `Average` olduğunu görebilirsiniz. Dize enterpolasyon sözdizimi, önceki biçimlendirme yöntemlerini kullanarak kullanılabilen tüm biçim dizelerini destekler. Ayraçların içindeki biçim dizesini belirtirsiniz. Biçime `:` aşağıdaki ifadeyi ekleyin:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Hızlı ve kolay null kontroller
  durationInMinutes: 2
  content: "`?.` (Null koşullu) işleci, değerleri sorunsuz bir `null` şekilde dikkate alan mantığın, ekstra `if` denetimler olmadan yazılmasını kolaylaştırır. Özelliği keşfetmek için, denemek için aşağıdaki kodu etkileşimli pencereye kopyalayarak başlayın:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nÖrneği çalıştırdığınızda bir <xref:System.NullReferenceException> atar. Üye `.` erişim işlecinin **null koşullu işleciile**değiştirilmesi:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nBu değişiklikten sonra çıktı yok. `s?.Length` Bunun nedeni, sonucun bir `int?` `s.Length` `int`. Bu `s?.Length` örnekte, `null`. Sol `?.` `null` operand ise `null`döner . İşleç, `?.` hem değer türleri hem de nullable olmayan başvuru türleri için bu tür için nullable türü döndürür. `?.` Ayrıca dizi veya `?[]` dizinleyici erişimi için kullanabilirsiniz. Etkileşimli pencerede aşağıdaki kodu deneyin:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Birden çok koşullu işleç tek bir ifadede birleştirilebilir. Sol `null` operand, `null` üyelerin üyelerine erişmek için iç içe eğer maddeler önlemek için kolay hale bir sonuç üretir. Örneğin, etkileşimli pencerede aşağıdaki kodu deneyin:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue && hasMore.Value);\n ```\n\n Önceki örnek, varsayılan bir değer sağlamak için **null coalescing işleci** kullanılarak basitleştirilmiş olabilir:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n **Null koşullu işleç,** değerler için `null` sorunsuz bir şekilde test ederken temel mantığınızı net kılan kod yazmanıza yardımcı olur.\n"
- title: Özel durum filtreleri
  durationInMinutes: 2
  content: "Özel durum filtreleri, bazı koşullara bağlı olarak özel bir durum yakalamanızı sağlar. Tipik bir kullanım, özel durumları günlüğe kaydeden, ancak bu özel durumları hiçbir zaman işlemeyen bir filtre yöntemi oluşturmaktır. Özel durum filtresi, yan `true` tümcenin `catch` yürütülmesi ve özel `false` durum maddenin ne zaman `catch` yakalanması gerektiği olan boolean ifadesidir. Etkileşimli pencerede aşağıdaki kodu deneyin: Bu konsola özel durum türü ve ileti günlükleri. Özel `false`durum işlenebilir olduğunu gösterir, döndürür. Etkileşimli pencerede programı deneyin.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n`LogException` Yöntemden gelen iletiyi görmeniz ve ardından varsayılan özel durum iletisini görmeniz gerekir. Sadece deneme yapmak `return false` için, `return true` deyimi değiştirin ve bunu yeniden çalıştırın. Şimdi, özel durum yakalanır ve program tamamlanmak üzere çalışır.\n\nGünlüğe kaydetme senaryolarının ötesinde, özel durum özelliği hangi eylemin gerçekleşeceğini belirlediğinde özel durum filtreleri en yararlı olabilir. Örneğin, içerdiği özel durumların <xref:System.AggregateException> ne olduğunu görmek ve belirli özel duruma bağlı olarak bazı uygun eylemde kalmak için bir in içine bakabilirsiniz.\n"
- title: Ad kullanma
  durationInMinutes: 2
  content: "İşletici, `nameof` herhangi bir değişkenin, bir türün veya bir türün üyesinin adını döndürür. Nasıl çalıştığını görmek için etkileşimli pencerede aşağıdaki kodu deneyin:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nÇıktı değişkenin veya türün adı yla eşleşir. Tam nitelikli tür adı (örneğin) `System.String`sağladığınızda `nameof` bile operatör niteliksiz adı döndürür. Bu özellik, bir parametre veya özellik adını bir dize dönüştürmeniz gerektiğinde en kullanışlıolan özelliktir. Örnekler arasında bir <xref:System.ArgumentNullException> veya , veya <xref:System.ArgumentException>bir 'yi uygularken <xref:System.ComponentModel.INotifyPropertyChanged>değiştirilen bir özelliğin adını yakalamak için bir bağımsız değişkenin adını yakalama \n"
- title: Yeni nesne başlatma sözdizimi
  durationInMinutes: 2
  content: "Nesne başharf sözdizimi artık *dizin oluşturmanın* yanı sıra özellikleri ve alanları da destekler. Bu ek, sözlükleri ve diğer türleri başlatmayı kolaylaştırır. Sözlükle başla. Etkileşimli pencerede aşağıdaki kodu çalıştırın:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nDizinleyicide bir değer ayarlayan bu sözdizimi, dizinleyicide erişilebilir bir ayarlı erişime sahip herhangi bir tür için kullanılabilir.\n\nİkinci bir değişiklik, dizileri temsil eden türler için baş harf sözdizimini etkinleştirmenizi kolaylaştırır. Koleksiyon başlatmalayıcıları, <xref:System.Collections.IEnumerable> genel olarak erişilebilen `Add` bir yöntem uygulayan ve kullanan herhangi bir sınıfta kullanılabilir. Bu `Add` yöntem artık bir uzantı yöntemi olabilir. \n\nAşağıdaki örnek, bu sözdizimi için bir senaryo gösterir. Bu uygulayan `Path` bir sınıf `IEnumerable<Point3D>` oluşturur ve üç bağımsız değişkenleri almak noktaları eklemek için bir yöntem vardır. Sınıf, `Extensions` üç bileşeninden yeni bir nokta eklemek için ek `Add` bir yöntem oluşturur. Bu örnek şu anda ortamkısıtlamaları nedeniyle etkileşimli olarak çalışmamaktadır.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: C# 6'daki yeni özelliklerin keşfini tamamladınız. Şimdi uygulamalarınızda kendiniz deneyin.
