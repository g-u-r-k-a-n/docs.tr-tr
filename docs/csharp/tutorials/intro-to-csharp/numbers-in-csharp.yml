### YamlMime:Tutorial
title: "C'deki integral ve kayan nokta sayılarını işleme #"
metadata:
  title: C# sayılar - C# etkileşimli öğreticiye giriş
  description: Sayısal türleri hakkında bu öğreticide, C# etkileşimli olarak öğrenmek için tarayıcınızı kullanırsınız. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: C# dilinde dallar ve döngüler
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 48268c6e839ae4f72aae0e872c837b153325b68b
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "77504019"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici c# interaktif sayısal türleri hakkında, C # yazmak ve derleme ve kodunuzu çalıştırma sonuçlarını görmek için tarayıcınızı kullanarak öğretir. C# dilinde işlemleri ve matematik işlemlerini inceleyen bir dizi ders bu hızlı başlangıca dahildir. Bu dersler size C# dilinin temel özelliklerini öğretir.
- title: Tamsayı matematiğini inceleme
  durationInMinutes: 4
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Odak **modunu gir düğmesini** seçin. Ardından, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır'ı**seçin:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Bunu ortamınızda çalıştırıyorsanız, bunun yerine yerel [sürüm](numbers-in-csharp-local.md) için yönergeleri izlemeniz gerekir.


    Az önce tamsayılarla gerçekleştirilen temel matematik işlemlerinden birini gördünüz. `int` türü pozitif veya negatif bir **tamsayıyı** ifade eder. Toplama için `+` sembolünü kullanırsınız. Tamsayılar için sıklıkla kullanılan diğer matematiksel işlemler şunlardır:


    - çıkarma için `-`

    - çarpma için `*`

    - bölme için `/`


    > [!TIP]

    > Bu etkileşimli öğretici boyunca, etkileşimli pencerede yazdığınız kodu değiştirerek kendi keşfedebilirsiniz. Bu öğretici, her adımda deneyebileceğiniz örnekler sağlar.


    Bu farklı işlemleri keşfederek başlayın. Bu işlemlerden her birini denemek için üçüncü satırı değiştirin. Her bir editten sonra **Çalıştır** düğmesini seçin.


    Çıkarma:


    ```csharp

    int c = a - b;

    ```


    Çarpma:


    ```csharp

    int c = a * b;

    ```


    Bölme:


    ```csharp

    int c = a / b;

    ```


    Ayrıca dilerseniz aynı satırda birden çok matematik işlemi gerçekleştirerek de deneme yapabilirsiniz.


    > [!TIP]

    > C# dilini (veya herhangi bir programlama dilini) keşfederken, kod yazdığınızda hatalar yapacaksınız. **Derleyici** bu hataları bulup size bildirir. Çıkış, hata iletileri içerdiğinde neyin düzeltilmesi gerektiğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kodunun yapısını öğrenmenize yardımcı olur.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: İşlem sırasını inceleme
  durationInMinutes: 7
  content: >
    C# dili, farklı matematik işlemlerinin önceliğini matematikte öğrendiğiniz kurallarla tutarlı bir şekilde tanımlar.

    Çarpma ve bölme işlemleri, toplama ve çıkarma işlemlerinden önce gelir.

    Etkileşimli pencerede aşağıdaki kodu çalıştırarak bunu keşfedin:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Çıkış, çarpma işleminin toplama işleminden önce gerçekleştiğini gösterir.


    İlk gerçekleştirmek istediğiniz işlemin veya işlemlerin etrafına ayraç ekleyerek farklı bir işlem sırası uygulayabilirsiniz:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Birçok farklı işlemi birleştirerek daha fazlasını keşfedin. Yukarıdaki dördüncü satırı şunun gibi bir şeyle değiştirin:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Tamsayılar için farklı bir davranışla karşılaşmış olabilirsiniz. Sonucun ondalık veya kesir bölümü içermesini bekliyor olsanız da tamsayı bölme işlemi her zaman tamsayı sonucu verir.


    Bu davranışı görmediyseniz şunları deneyin:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Sonuçları görmek için Yeniden **Çalıştır'ı** seçin.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Tamsayı duyarlığını ve sınırlarını inceleme
  durationInMinutes: 5
  content: >
    Son örnek, tamsayı bölme işleminin sonucu kestiğini size göstermiştir.

    Kalan **işleci,** `%` karakter kullanarak **geri kalanı** alabilirsiniz:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    C# tamsayı türü diğer bir özelliğiyle matematiksel tamsayılardan farklıdır: `int` türünün alt ve üst sınırları vardır. Bu sınırları görmek için etkileşimli pencerede şu kodu çalıştırın:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Bir hesaplama, bu sınırları aşan bir değer veriyorsa bu, **aşağı taşma** veya **taşma** koşulunuzun olduğu anlamına gelir. Yanıtın bir sınırdan diğerine kaydığı görülüyor. Bir örnek görmek için şu iki satırı etkileşimli pencereye ekleyin:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Yanıtın tam sayı alt sınırına (negatif) oldukça yakın olduğuna dikkat edin. Bu, `min + 2` ile aynıdır.

    Toplama işlemi, tamsayılar için izin verilen değerleri **aşmıştır**.

    Taşma durumu en büyük olası tamsayı değerinden en küçük olana "kaydığından" yanıt oldukça büyük bir negatif sayıdır.


    `int` türü, gereksinimlerinizi karşılamadığında kullanabileceğiniz farklı sınırlar ve duyarlık içeren başka sayısal türler de mevcuttur. Bir sonraki adımda bunları inceleyelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Çift tür ile çalışma
  durationInMinutes: 5
  content: >
    `double` sayısal türü, çift duyarlıklı kayan noktalı bir sayıyı ifade eder. Bu terimler sizin için yeni olabilir. **Kayan noktalı** sayı, büyüklük açısından oldukça büyük veya küçük olabilen, tamsayı olmayan değerleri ifade etmek için kullanılır. **Çift duyarlıklı**, bu sayıların **tek duyarlıktan** daha fazla duyarlık kullanılarak depolandığı anlamına gelir. Modern bilgisayarlarda çift duyarlıklı sayı kullanımı, tek duyarlıklı sayılara göre daha yaygındır.

    İnceleyelim mi? Etkileşimli pencerede şu kodu deneyin ve sonuca bakın:


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Yanıtın, bölümün ondalık kısmını içerdiğine dikkat edin. Çift değerlerle biraz daha karmaşık bir ifadeyi deneyin:


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Çift değerin aralığı, tamsayı değerlerinden çok daha büyüktür. Etkileşimli pencerede aşağıdaki kodu deneyin:


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Bu değerler bilimsel gösterimde yazdırılır. `E` değerinin sol tarafındaki sayı katsayıdır. Sağ taraftaki sayı 10’un bir kuvveti olarak üstür.


    Matematikteki ondalık sayılar gibi C# dilindeki çift değerlerde de yuvarlama hataları olabilir. Şu kodu deneyin:


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    `0.3` yinelemesinin `1/3` ile tam olarak aynı olmadığını fark edersiniz.


    ***Sınama***


    `double` türünü kullanarak büyük sayılar, küçük sayılar, çarpma işlemi ve bölme işlemi ile diğer hesaplamaları deneyin.  Daha karmaşık hesaplamalar deneyin.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Sabit nokta türleriyle çalışma
  durationInMinutes: 8
  content: >
    C# dilinde temel sayısal türleri gördünüz: tamsayılar ve çiftler.  Öğrenmeniz gereken bir tür daha vardır: `decimal` türü. `decimal` türü, `double` türünden daha küçük bir aralığa ancak daha fazla duyarlığa sahiptir. **Sabit nokta** terimi, ondalık ayırıcının (veya ikili noktasının) hareket etmediği anlamına gelir. Şimdi buna bir göz atalım:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Aralığın `double` türünden daha küçük olduğuna dikkat edin. Aşağıdaki kodu deneyerek ondalık türünde daha fazla duyarlık olduğunu görebilirsiniz:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Sayılardaki `M` sonekiyle, bir sabit sayının `decimal` türünü nasıl kullanması gerektiğini belirtirsiniz.


    Ondalık türünün kullanıldığı matematikte, ondalık ayırıcının sağ tarafında daha fazla basamak bulunduğunu görebilirsiniz.


    ***Sınama***


    Farklı sayısal türleri gördüğünüze göre yarı çapı 2,50 santimetre olan bir dairenin alanını hesaplayan kodu yazın. Bir dairenin alanının, yarı çapın karesinin PI sayısı ile çarpımından elde edildiğini unutmayın. İpucu: .NET, PI sayısı için kullanabileceğiniz <xref:System.Math.PI?displayProperty=nameWithType> sabit değerini içerir.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).


    19 ile 20 arasında bir yanıt almanız gerekir.
- title: Görevi tamamlama
  durationInMinutes: 1
  content: >
    Şunun gibi bir şeyle karşılaştınız mı?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Dilerseniz diğer formüllerden de deneme yapabilirsiniz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- content: "\"C#'daki Sayılar\" interaktif eğitimini tamamladınız. Bir sonraki etkileşimli öğreticiyi başlatmak için aşağıdaki **Şubeler ve Döngüler** bağlantısını seçebilir veya .NET Core SDK'yı indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.NET sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz. \"Sonraki adımlar\" bölümü sizi bu öğreticilere geri getirir.\n\nAşağıdaki konularda C# dilinde sayılar hakkında daha fazla bilgi edinebilirsiniz:\n\n- [Tamsayı sayısal türler](../../language-reference/builtin-types/integral-numeric-types.md)\n- [Kayan nokta sayısal türleri](../../language-reference/builtin-types/floating-point-numeric-types.md)\n- [Yerleşik sayısal dönüşümler](../../language-reference/builtin-types/numeric-conversions.md)"
