### YamlMime:Tutorial
title: Biçimlendirilen dizeler oluşturmak için dize ilişkilendirmeyi kullanın
metadata:
  title: Dize ilişkilendirme-C# etkileşimli öğreticisi
  description: Bu öğreticide, tarayıcınızı kullanarak C# String enterpolasyon özelliğini etkileşimli olarak keşfedebilirsiniz. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 7736a2a26b37d8fbfac98328f94ce3c9a25be181
  ms.sourcegitcommit: d9c7ac5d06735a01c1fafe34efe9486734841a72
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/06/2020
  ms.locfileid: "82861003"
items:
- durationInMinutes: 2
  content: >
    Bu öğretici, tek bir dizeye değerler eklemek için [dize ilişkilendirmeyi](../../language-reference/tokens/interpolated.md) nasıl kullanacağınızı öğretir. Sonuç dizesinin metin biçimlendirmesini nasıl denetleyeceğinizi de öğreneceksiniz. C# kodu yazmak ve çalıştırmak için tarayıcınızı kullanırsınız ve sonuçları hemen görebilirsiniz.
- title: İlişkilendirilmiş dize oluşturma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. **Odak modunu girin** düğmesini seçin. Ardından, etkileşimli pencereye (adınızla değiştirin `<name>` ) aşağıdaki kod bloğunu yazın ve **Çalıştır**' ı seçin:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Kodu çalıştırdığınızda, **Çıkış** , selamdaki adınızı içeren bir dize görüntüler. <xref:System.Console.WriteLine%2A> Yöntem çağrısının dize bağımsız değişkeni, bir *enterpolasyonlu dize ifadesidir*. Bu, gömülü kod içeren bir dizeden tek bir dize (*sonuç dizesi* olarak adlandırılır) oluşturmanızı sağlayan bir şablon türüdür. Enterpolasyonlu dize ifadeleri, bir dizeye değer eklemek veya birkaç dizeyi birleştirmek (birlikte birleştirmek) için özellikle faydalıdır.


    Yukarıdaki örnek, her bir enterpolasyonlu dize ifadesinin sahip olması gereken iki öğeyi içerir:


    - Açma tırnak işareti karakterinden önce `$` karakteriyle başlayan bir dize sabit değeri. `$` sembolü ile tırnak işareti karakteri arasında boşluk olamaz. (Bir tane eklerseniz ne olacağını görmek isterseniz, etkileşimli penceredeki `$` karakterden sonra bir boşluk ekleyin ve güncelleştirilmiş kodu çalıştırın. C# derleyicisi “Beklenmeyen karakter ‘$’” şeklinde hata verir.)


    - Bir veya daha fazla *ilişkilendirme ifadesi*. Enterpolasyon ifadesi bir açma ve kapatma ayracı (`{` ve `}`) ile belirtilir. Ayraçlar arasında bir değer (`null` dahil) döndüren herhangi bir C# ifadesini ekleyebilirsiniz.


    Biraz daha farklı veri türleriyle daha fazla dize ilişkilendirme örneği deneyelim.
- title: Farklı veri türleri ekleme
  durationInMinutes: 5
  content: >
    Önceki adımda, bir dizeyi diğerinin içine eklemek için dize ilişkilendirmeyi kullandınız. Bir enterpolasyonlu dize ifadesinin parçası olan her ilişkilendirme ifadesi herhangi bir veri türünde olabilir, ancak. Enterpolasyonlu bir dizedeki çeşitli veri türü ifadelerinin değerlerini ekleyelim.


    Aşağıdaki örnekte, ilk `Name`olarak, `Price`, ve `perPackage` üyeleri olan bir [tanımlama grubu](../../tuples.md) tanımladık. Etkileşimli pencerede aşağıdaki kodu çalıştırın:


    ```csharp

    var item = (Name: "eggplant", Price: 1.99m, perPackage: 3);

    var date = DateTime.Now;

    Console.WriteLine($"On {date}, the price of {item.Name} was {item.Price} per {item.perPackage} items.");

    ```


    Enterpolasyonlu dizedeki `item.Price` enterpolasyon ifadesinin sonuç dizesinde "1,99" metnine çözümlendiğine unutmayın. Yani, ifade sonucunun türü bir dize olmadığında, sonuç aşağıdaki şekilde bir dizeye çözülür:


    - Enterpolasyon ifadesi olarak `null`değerlendirilirse, boş bir dize ("" veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.


    - İlişkilendirme ifadesi olarak `null`değerlendirilmiyorsa, genellikle sonuç ifadesinin `ToString` yöntemi çağırılır.


    Bu örnekteki çıktıda, tarih çok kesin (eggbitki fiyatı her saniye değişmez) ve fiyat değeri bir para birimi göstermez. Sonraki adımda, ifade sonuçlarının dize gösterimlerini denetleyerek bu sorunları nasıl giderebileceğinizi öğreneceksiniz.
- title: Enterpolasyon ifadelerinin biçimlendirmesini denetleme
  durationInMinutes: 5
  content: >
    Önceki adımda, sonuç dizesine hatalı biçimli iki dize eklenmiştir. Biri tarih ve saat değeriydi, bunlardan yalnızca tarih değeri uygundu. İkincisi, para birimi birimini göstermediğiniz bir fiyattır. Her iki sorun da kolayca giderilebilir. Dize ilişkilendirme, belirli türlerin biçimlendirilmesini denetleyen *Biçim dizelerini* belirtmenize olanak tanır. Aşağıdaki satırda gösterildiği gibi `Console.WriteLine` , tarih ve fiyat ifadelerine yönelik biçim dizelerini dahil etmek için önceki örnekteki çağrısını değiştirin:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items");

    ```


    Bir biçim dizesini, iki nokta üst üste (":") ve biçim dizesiyle birlikte enterpolasyon ifadesini izleyerek belirtirsiniz. “d”, kısa tarih biçimini ifade eden [standart tarih ve saat biçimi dizesidir](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier). "C2", ondalık ayırıcıdan sonraki iki basamakla para birimi değeri olarak bir sayıyı temsil eden [Standart bir sayısal biçim dizesidir](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) .


    .NET kitaplıklarında bulunan birçok tür, önceden tanımlanmış bir biçim dizeleri kümesini destekler. Bunlara tüm sayısal türlerin yanı sıra tarih ve saat türleri de dahildir. Biçim dizelerini destekleyen türlerin tam listesi için [.NET’teki Biçimlendirme Türleri](../../../standard/base-types/formatting-types.md) başlıklı makalede bulunan [Biçim Dizeleri ve .NET Sınıfı Kitaplık Türleri](../../../standard/base-types/formatting-types.md#format-strings-and-net-types) bölümüne bakın.


    Tarih ve saat ve sayısal değer biçimlendirmesini nasıl etkilediğini görmek için örnekteki biçim dizelerini değiştirmeyi deneyin. `{date:d}` içindeki “d”yi “t” olarak (kısa saat biçimini görüntülemek için), “y” olarak (yılı ve ayı görüntülemek için) ve “yyyy” olarak (yılı dört basamaklı sayı olarak görüntülemek için) değiştirin. `{price:C2}` içindeki “C2”yi “e” olarak (üstel gösterim için) ve “F3” olarak (ondalık ayırıcıdan sonra üç basamak içeren sayısal bir değer için) değiştirin.


    Biçimlendirmeyi denetlemenin yanı sıra, sonuç dizesinde bulunan biçimlendirilmiş dizelerin alan genişliğini ve hizalamasını da denetleyebilirsiniz. Bir sonraki adımda bunu nasıl yapacağınızı öğreneceksiniz.
- title: Enterpolasyon ifadelerinin alan genişliğini ve hizalamasını denetleme
  durationInMinutes: 6
  content: >
    Normalde, bir enterpolasyonlu dize ifadesinin sonucu dize olarak biçimlendirildiğinde, bu dize öndeki veya sondaki boşluklar olmadan bir sonuç dizesine dahil edilir. Özellikle bir veri kümesiyle çalışırken, alan genişliğini denetleyebilmekte ve metin hizalaması daha okunabilir bir çıktı oluşturulmasına yardımcı olur. Bunu görmek için aşağıdaki kodu çalıştırın:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Öğe adları sola hizalanmış, bunların miktarları ise sağa hizalanmıştır. Bir ilişkilendirme ifadesinden sonra bir virgül (",") ekleyerek ve *en az* alan genişliğini belirterek hizalamayı belirlersiniz. Belirtilen değer pozitif bir sayıysa, alan sağa hizalanır. Negatif bir sayı ise, alan sola hizalanır.


    `{"Item",-25}` Ve `{item.Key,-25}` kodundan negatif işaretleri kaldırmayı deneyin ve örneği yeniden çalıştırın. Bu kez, öğe adları sağa hizalanır.


    Tek bir ilişkilendirme ifadesi için bir hizalama belirleyicisi ve biçim dizesi birleştirebilirsiniz. Bunu yapmak için önce hizalamayı, ardından iki nokta üst üste ve biçim dizesini belirtin. Tanımlı alan genişlikleri olan üç biçimli dizeyi görüntüleyen aşağıdaki kodu deneyin:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```
- content: >-
    Dize ilişkilendirme etkileşimli öğreticisini tamamladınız. .NET Core SDK indirmek için [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilir, makinenizde bir proje oluşturabilir ve kodlamayı tutabilirsiniz.


    Daha fazla bilgi için bkz. [dize ilişkilendirme](../../language-reference/tokens/interpolated.md).
