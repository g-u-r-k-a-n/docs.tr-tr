### YamlMime:Tutorial
title: Merhaba Dünya-C# etkileşimli C# öğreticisine giriş
metadata:
  title: Merhaba Dünya-C# etkileşimli C# öğreticisine giriş
  description: Bu öğreticide, etkileşimli olarak C# öğrenmesini sağlamak için tarayıcınızı kullanacaksınız. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: C# numaraları
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 025b3e0fcaf693be00f1ca396b92617d6faf31aa
  ms.sourcegitcommit: d9c7ac5d06735a01c1fafe34efe9486734841a72
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/06/2020
  ms.locfileid: "82860971"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici, c# yazmak ve kodunuzu derleyip çalıştırmanın sonuçlarını görmek için tarayıcınızı kullanarak c# ' yi etkileşimli olarak öğretir. “Merhaba Dünya” programıyla başlayan bir dizi ders de bu öğreticiye dahildir. Bu dersler size C# dilinin temel özelliklerini öğretir.
- title: İlk C# programınızı çalıştırma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. **Odak modunu girin** düğmesini seçin. Ardından, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır**' ı seçin:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Tebrikler! İlk C# programınızı çalıştırdınız. Bu, “Merhaba Dünya!” iletisini yazdıran basit bir programdır. Bu, söz konusu iletiyi yazdırmak için <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> yöntemini kullanmıştır. `Console`, konsol penceresini ifade eden bir türdür. `WriteLine` bu metin konsoluna metin satırı yazdıran `Console` türünün bir yöntemidir.


    Şimdi ilerleyelim ve daha fazla keşif yapalım. Bu dersin geri kalan kısmında, metni C# dilinde ifade eden `string` türüyle çalışma konusu incelenir. `Console` türü gibi `string` türünün de yöntemleri vardır. `string` yöntemleri metinle çalışır.
- title: Değişken bildirme ve kullanma
  durationInMinutes: 3
  content: >
    İlk programınız ekrana `string` “Merhaba Dünya!” iletisini yazdırdı.


    > [!TIP]

    > C# dilini (veya herhangi bir programlama dilini) keşfederken, kod yazdığınızda hatalar yapacaksınız. **Derleyici** bu hataları bulup size bildirir. Çıkış, hata iletileri içerdiğinde neyin düzeltilmesi gerektiğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kodunun yapısını öğrenmenize yardımcı olur.


    İlk programınız bir ileti yazdırmayla sınırlıdır. **Değişkenleri** kullanarak daha kullanışlı programlar yazabilirsiniz. **Değişken**, aynı kodu farklı değerlerle çalıştırmak için kullanabileceğiniz bir semboldür. Deneyelim mi? Etkileşimli pencerede yazdığınız kodu şu kodla değiştirin:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    Örneğin, ilk satır `aFriend` değişkenini tanımlar ve buna “Bill” değerini atar. İkinci satır, adı yazdırır.


    Bildirdiğiniz herhangi bir değişkene farklı değerler atayabilirsiniz. Adı arkadaşlarınızdan birinin adıyla değiştirebilirsiniz. Etkileşimli pencerede şu iki satırı, eklemiş olduğunuz koddan sonra ekleyin:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Aynı kod satırının, `aFriend` değişkeninde depolanan değere göre iki farklı ileti yazdırdığına dikkat edin.


    Ayrıca “Hello” kelimesinin son iki iletide eksik olduğunu da fark etmiş olabilirsiniz. Şimdi bunu düzeltelim.  İletiyi aşağıdakine göre yazdıran satırları değiştirin:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Sonuçları görmek için yeniden **Çalıştır** ' ı seçin.


    `+` **Değişkenlerden** ve **sabit** dizelerdeki dizeleri derlemek için kullanıyorsunuz. Daha iyi bir yoldur.

    C# ' ın bu metni değişkenin `{` değeriyle `}` değiştirmesini söylemek için, ve karakterleri arasına bir değişken yerleştirebilirsiniz.


    Bu, [dize ilişkilendirme](../../language-reference/tokens/interpolated.md)olarak adlandırılır.


    Dizenin açılış tırnağından önce bir `$` eklerseniz, gibi `aFriend`değişkenleri, küme ayraçları arasındaki dizenin içine ekleyebilirsiniz. Deneyin:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Sonuçları görmek için yeniden **Çalıştır** ' ı seçin. "Merhaba {aFriend}" yerine ileti "Hello Maira" olmalıdır.
- title: Dizelerle çalışma
  durationInMinutes: 5
  content: >
    Son yaptığınız düzenleme, dizelerle yapabileceklerinize ilişkin ilk bakışımızdı. Şimdi daha fazlasını keşfedelim.


    Küme ayraçları arasında tek bir değişkenle sınırlı değilsiniz. Şunu deneyin:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Dizelerle daha fazlasını keşfettireceğiz, dizelerin bir harf koleksiyonundan daha fazla olduğunu fark edeceksiniz. Kullanarak `Length`bir dizenin uzunluğunu bulabilirsiniz. `Length`, bir dizenin **özelliğidir** ve söz konusu dizedeki karakter sayısını döndürür. Etkileşimli pencerenin alt tarafına şu kodu ekleyin:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Bu, kendi kendinize keşif yapmanız için iyi bir fırsattır. `Console.WriteLine()` tarafından ekrana metin yazıldığını öğrendiniz. Değişkenleri bildirmeyi ve dizeleri birleştirmeyi öğrendiniz. Etkileşimli pencerede denemeler yapın. Pencerede, **IntelliSense** adlı bir özellik bulunur ve yapabilecekleriniz için öneriler sağlar. Öğesinden sonra `.` `d` bir yazın `firstFriend`. Kullanabileceğiniz özellikler ve yöntemler için önerilerin bir listesini görürsünüz.
- title: Dizelerle daha fazlasını gerçekleştirme
  durationInMinutes: 5
  content: >
    İletileri yazdırmak için bir **Yöntem** <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>kullanıyorsunuz. **Yöntem**, bazı eylemleri uygulayan bir kod bloğudur. Bir adı olduğundan yönteme erişebilirsiniz.


    Dizelerinizin görüntülenmesini istemediğiniz baştaki veya sondaki boşlukların olduğunu varsayalım. Dizelerin içindeki boşlukları **kırpmak** istiyorsunuz.

    <xref:System.String.Trim%2A> Yöntemi ve ilgili yöntemleri <xref:System.String.TrimStart%2A> ve <xref:System.String.TrimEnd%2A> bunu çalışır. Baştaki ve sondaki boşlukları kaldırmak için yalnızca bu yöntemleri kullanabilirsiniz. Aşağıdaki kodu deneyin:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    `[` Köşeli parantezler `]` , `Trim` `TrimStart` ve `TrimEnd` yöntemlerinin ne yaptığını görselleştirmenize yardımcı olur. Köşeli ayraçlar, boşluk başladığı ve bittiği yeri gösterir.


    Bu örnek, birkaç önemli kavramı dizelerle çalışacak şekilde güçlendirir. Dizeleri işleyen yöntemler, değişiklik yapmak yerine yeni dize nesneleri döndürür. `Trim` Yöntemlerin herhangi birine yönelik her çağrının yeni bir dize döndürdüğünü, ancak özgün iletiyi değiştirmediğini görebilirsiniz.


    Bir dizeyle çalışmak için kullanılabilen başka yöntemler de mevcuttur. Örneğin, büyük olasılıkla bir düzenleyicide veya Word işlemcisinde bir arama ve değiştirme komutu kullandınız. Yöntemi <xref:System.String.Replace%2A> , bir dizede benzer bir şey yapar. Bir alt dizeyi arar ve farklı bir metinle değiştirir. <xref:System.String.Replace%2A> yöntemi iki **parametre** alır. Bunlar ayraç içindeki dizelerdir. İlk dize, aranacak metindir. İkinci dize, birinci dizenin yerine geçecek dizedir. Kendiniz deneyin. Bu kodu ekleyin. `sayHello` Değişkenden sonra yazmaya `.Re` başladığınızda ipuçlarına bakmak için yazın:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    İki diğer kullanışlı yöntem bir dizenin tüm harflerini BÜYÜK veya tüm harflerini küçük yapar. Aşağıdaki kodu deneyin. **IntelliSense** 'in şunu yazmakta `To`başladığınızda ipuçları nasıl sağladığını görmek için yazın:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```
- title: Dizeleri arama
  durationInMinutes: 10
  content: >
    *Ara ve değiştir* işleminin diğer bir parçası bir dizede metin bulmaktır. Arama için <xref:System.String.Contains%2A> yöntemini kullanabilirsiniz. Bir dizenin içinde alt dizesi olup olmadığını size bildirir. <xref:System.String.Contains%2A> yöntemini araştırmak için aşağıdaki kodu deneyin:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    <xref:System.String.Contains%2A> yöntemi, aradığınız dizenin bulunup bulunmadığını size belirten bir **boole** değeri döndürür. **Boole** değeri bir `true` veya `false` değeri depolar. Metin çıktısı olarak görüntülendiğinde, bunlar sırasıyla büyük harfle alınır `True` : `False`ve. Sonraki bir derste **boole** değerleriyle ilgili daha fazla bilgi edineceksiniz.


    ***Sınama***


    Biri <xref:System.String.StartsWith%2A>, diğeri ise <xref:System.String.EndsWith%2A> olmak üzere, bir dizedeki alt dizeleri de arayan iki benzer yöntem mevcuttur. Bunlar alt dizeyi dizenin başında veya sonunda bulur. <xref:System.String.Contains%2A> yerine <xref:System.String.StartsWith%2A> ve <xref:System.String.EndsWith%2A> yöntemlerini kullanmak için önceki örneği değiştirmeyi deneyin. Bir dizenin başında “You” veya “goodbye” ifadesini arayın. Bir dizenin sonunda “hello” veya “goodbye” ifadesini arayın.


    > [!NOTE]

    > Dizenin sonundaki metin için test gerçekleştirirken kullandığınız noktalama işaretlerine dikkat edin. Dize nokta ile bitiyorsa, nokta ile biten bir dizeyi kontrol etmeniz gerekir.


    “You” ile başlayıp “hello” ile bitirirseniz `true`, “goodbye” ile başlar veya bitirirseniz false değerini alırsınız.
- title: Görevi tamamlama
  durationInMinutes: 3
  content: >
    Şunun gibi bir şeyle karşılaştınız mı?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```
- content: "\"Hello C#\" C# öğreticisine giriş ' i tamamladınız. Sonraki etkileşimli öğreticiye başlamak için aşağıdaki **C# bağlantısındaki rakamları** seçebilir veya .NET Core SDK indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz. \"Sonraki adımlar\" bölümü, sizi bu öğreticilere geri getirir.\n\n`string` Tür hakkında daha fazla bilgi için:\n- [Dizeler](../../programming-guide/strings/index.md)üzerinde [C# Programlama Kılavuzu](../../programming-guide/index.md) konusu.\n- [Dizelerle çalışma hakkında ipuçları](../../how-to/index.md#working-with-strings)."
