### YamlMime:Tutorial
title: Hello World - C# interaktif C# eğitimine giriş
metadata:
  title: Hello World - C# interaktif C# eğitimine giriş
  description: Bu eğitimde, C# etkileşimli olarak öğrenmek için tarayıcınızı kullanırsınız. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: C# numaraları
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 365cf0b2ef36dd0be624d022e3dea5e16a9eb58c
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969418"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici c# yazmak ve kodunuzu derleme ve çalıştırma sonuçlarını görmek için tarayıcınızı kullanarak, interaktif C # öğretir. “Merhaba Dünya” programıyla başlayan bir dizi ders de bu öğreticiye dahildir. Bu dersler size C# dilinin temel özelliklerini öğretir.
- title: İlk C# programınızı çalıştırma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Odak **modunu gir düğmesini** seçin. Ardından, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır'ı**seçin:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Tebrikler! İlk C# programınızı çalıştırdınız. Bu, “Merhaba Dünya!” iletisini yazdıran basit bir programdır. Bu, söz konusu iletiyi yazdırmak için <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> yöntemini kullanmıştır. `Console`, konsol penceresini ifade eden bir türdür. `WriteLine` bu metin konsoluna metin satırı yazdıran `Console` türünün bir yöntemidir.


    Şimdi ilerleyelim ve daha fazla keşif yapalım. Bu dersin geri kalan kısmında, metni C# dilinde ifade eden `string` türüyle çalışma konusu incelenir. `Console` türü gibi `string` türünün de yöntemleri vardır. `string` yöntemleri metinle çalışır.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Değişken bildirme ve kullanma
  durationInMinutes: 3
  content: >
    İlk programınız ekrana `string` “Merhaba Dünya!” iletisini yazdırdı.


    > [!TIP]

    > C# dilini (veya herhangi bir programlama dilini) keşfederken, kod yazdığınızda hatalar yapacaksınız. **Derleyici** bu hataları bulup size bildirir. Çıkış, hata iletileri içerdiğinde neyin düzeltilmesi gerektiğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kodunun yapısını öğrenmenize yardımcı olur.


    İlk programınız bir ileti yazdırmayla sınırlıdır. **Değişkenleri** kullanarak daha kullanışlı programlar yazabilirsiniz. **Değişken**, aynı kodu farklı değerlerle çalıştırmak için kullanabileceğiniz bir semboldür. Deneyelim mi? Etkileşimli pencerede yazdığınız kodu şu kodla değiştirin:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    Örneğin, ilk satır `aFriend` değişkenini tanımlar ve buna “Bill” değerini atar. İkinci satır, adı yazdırır.


    Bildirdiğiniz herhangi bir değişkene farklı değerler atayabilirsiniz. Adı arkadaşlarınızdan birinin adıyla değiştirebilirsiniz. Etkileşimli pencerede şu iki satırı, eklemiş olduğunuz koddan sonra ekleyin:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Aynı kod satırının, `aFriend` değişkeninde depolanan değere göre iki farklı ileti yazdırdığına dikkat edin.


    Ayrıca “Hello” kelimesinin son iki iletide eksik olduğunu da fark etmiş olabilirsiniz. Şimdi bunu düzeltelim.  İletiyi aşağıdakine göre yazdıran satırları değiştirin:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Sonuçları görmek için Yeniden **Çalıştır'ı** seçin.


    **Değişkenlerden** ve `+` **sabit** dizeleri dizeleri oluşturmak için kullanıyorsunuz. Daha iyi bir yol var.

    C#'ya bu `{` `}` metnin değişkenin değeriyle değiştirilmesi için bir değişken ve karakterler arasında bir değişken yerleştirebilirsiniz.


    Buna [String enterpolasyonu](../../language-reference/tokens/interpolated.md)denir.


    Dize açılış `$` teklifinden önce bir eklemeden önce, kıvırcık ayraçlar arasındaki dize nin içine değişkenler `aFriend`ekleyebilirsiniz. Bir deneyin:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Sonuçları görmek için Yeniden **Çalıştır'ı** seçin. "Hello {aFriend}" yerine, ileti "Hello Maira" olmalıdır.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Dizelerle çalışma
  durationInMinutes: 5
  content: >
    Son yaptığınız düzenleme, dizelerle yapabileceklerinize ilişkin ilk bakışımızdı. Şimdi daha fazlasını keşfedelim.


    Kıvırcık ayraçlar arasında tek bir değişkenle sınırlı değilsin. Şunu deneyin:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Dizeleri ile daha fazla keşfetmek gibi, dizeleri harflerin bir koleksiyon daha fazla olduğunu göreceksiniz. Bir dize uzunluğunu kullanarak `Length`bulabilirsiniz. `Length`, bir dizenin **özelliğidir** ve söz konusu dizedeki karakter sayısını döndürür. Etkileşimli pencerenin alt tarafına şu kodu ekleyin:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Bu, kendi kendinize keşif yapmanız için iyi bir fırsattır. `Console.WriteLine()` tarafından ekrana metin yazıldığını öğrendiniz. Değişkenleri bildirmeyi ve dizeleri birleştirmeyi öğrendiniz. Etkileşimli pencerede denemeler yapın. Pencere, **intelliSense** adında bir özelliğe sahiptir ve yapabilecekleriniz için önerilerde bulunur. In'den `.` `d` `firstFriend`sonra a yazın. Kullanabileceğiniz özellikler ve yöntemler için önerilerin bir listesini görürsünüz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Dizelerle daha fazlasını gerçekleştirme
  durationInMinutes: 5
  content: >
    İletileri yazdırmak **method**için <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>bir yöntem kullanıyorsunuz. **Yöntem**, bazı eylemleri uygulayan bir kod bloğudur. Bir adı olduğundan yönteme erişebilirsiniz.


    Dizelerinizin görüntülemek istemediğiniz öncü veya öncü alanlar olduğunu varsayalım. Dizeleri boşlukları **kırpmak** istiyorum.

    <xref:System.String.Trim%2A> Yöntem ve ilgili <xref:System.String.TrimStart%2A> <xref:System.String.TrimEnd%2A> yöntemler ve bu işi yapmak. Sadece önde gelen ve sondaki alanları kaldırmak için bu yöntemleri kullanabilirsiniz. Aşağıdaki kodu deneyin:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Bu örnek, birkaç önemli kavramı dizelerle çalışacak şekilde güçlendirir. Dizeleri işleyen yöntemler, değişiklik yapmak yerine yeni dize nesneleri döndürür. Yöntemlerden herhangi birine yapılan her `Trim` çağrının yeni bir dize döndürteceğini, ancak özgün iletiyi değiştirmediğini görebilirsiniz.


    Bir dizeyle çalışmak için kullanılabilen başka yöntemler de mevcuttur. Örneğin, daha önce bir düzenleyici veya sözcük işlemcisinde büyük olasılıkla bir arama ve değiştirme komutu kullandınız. Yöntem <xref:System.String.Replace%2A> bir dize benzer bir şey yapar. Bir alt dize arar ve farklı bir metin ile değiştirir. <xref:System.String.Replace%2A> yöntemi iki **parametre** alır. Bunlar ayraç içindeki dizelerdir. İlk dize, aranacak metindir. İkinci dize, birinci dizenin yerine geçecek dizedir. Kendiniz deneyin. Bu kodu ekleyin. Değişkenden sonra yazmaya `.Re` başladığınızda ipuçlarını görmek için yazın: `sayHello`


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    İki diğer kullanışlı yöntem bir dizenin tüm harflerini BÜYÜK veya tüm harflerini küçük yapar. Aşağıdaki kodu deneyin. Yazmaya başladığınızda **IntelliSense'in** ipuçlarını nasıl sağladığını `To`görmek için yazın:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Dizeleri arama
  durationInMinutes: 10
  content: >
    *Ara ve değiştir* işleminin diğer bir parçası bir dizede metin bulmaktır. Arama için <xref:System.String.Contains%2A> yöntemini kullanabilirsiniz. Bir dizenin içinde alt dizesi olup olmadığını size bildirir. <xref:System.String.Contains%2A> yöntemini araştırmak için aşağıdaki kodu deneyin:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    <xref:System.String.Contains%2A> yöntemi, aradığınız dizenin bulunup bulunmadığını size belirten bir **boole** değeri döndürür. **Boole** değeri bir `true` veya `false` değeri depolar. Sonraki bir derste **boole** değerleriyle ilgili daha fazla bilgi edineceksiniz.


    ***Sınama***


    Biri <xref:System.String.StartsWith%2A>, diğeri ise <xref:System.String.EndsWith%2A> olmak üzere, bir dizedeki alt dizeleri de arayan iki benzer yöntem mevcuttur. Bunlar alt dizeyi dizenin başında veya sonunda bulur. <xref:System.String.Contains%2A> yerine <xref:System.String.StartsWith%2A> ve <xref:System.String.EndsWith%2A> yöntemlerini kullanmak için önceki örneği değiştirmeyi deneyin. Bir dizenin başında “You” veya “goodbye” ifadesini arayın. Bir dizenin sonunda “hello” veya “goodbye” ifadesini arayın.


    > [!NOTE]

    > Dizenin sonundaki metin için test gerçekleştirirken kullandığınız noktalama işaretlerine dikkat edin. Dize nokta ile bitiyorsa, nokta ile biten bir dizeyi kontrol etmeniz gerekir.


    “You” ile başlayıp “hello” ile bitirirseniz `true`, “goodbye” ile başlar veya bitirirseniz false değerini alırsınız.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Görevi tamamlama
  durationInMinutes: 3
  content: >
    Şunun gibi bir şeyle karşılaştınız mı?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- content: >-
    C# öğreticisine "Hello C#" girişini tamamladınız. Bir sonraki etkileşimli öğreticiyi başlatmak için aşağıdaki **C#** bağlantısındaki Sayılar bağlantısını seçebilir veya .NET Core SDK'yı indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.NET sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz. "Sonraki adımlar" bölümü sizi bu öğreticilere geri getirir.


    `string` Türü hakkında daha fazla bilgi için:

    - [C# Programlama Kılavuzu](../../programming-guide/index.md) [konu dizeleri](../../programming-guide/strings/index.md).

    - [Nasıl dizeleri ile çalışma ipuçları](../../how-to/index.md#working-with-strings).
