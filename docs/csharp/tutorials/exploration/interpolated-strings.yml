### YamlMime:Tutorial
title: Biçimlendirilmiş dizeleri oluşturmak için dize enterpolasyonunu kullanma
metadata:
  title: String enterpolasyonu - C# interaktif öğretici
  description: Bu eğitimde, C# string enterpolasyon özelliğini etkileşimli olarak keşfetmek için tarayıcınızı kullanırsınız. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1b54ea8b3bbb63bdadb8386b0f6311f1f5458b42
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "76737538"
items:
- durationInMinutes: 2
  content: >
    Bu öğretici, değerleri tek bir dize eklemek için [dize enterpolasyonunu](../../language-reference/tokens/interpolated.md) nasıl kullanacağınızı öğretir. Ayrıca, sonuç dizesinin metin biçimlendirmesini nasıl denetlersiniz. C# kodu yazmak ve çalıştırmak için tarayıcınızı kullanırsınız ve sonuçları hemen görebilirsiniz.
- title: İlişkilendirilmiş dize oluşturma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Odak **modunu gir düğmesini** seçin. Ardından, etkileşimli pencereye aşağıdaki kod `<name>` bloğunu yazın (adınız ile değiştirin) ve **Çalıştır'ı**seçin:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Kodu çalıştırdığınızda, **Çıktı** karşılamada adınızı içeren bir dize görüntüler. Yöntem çağrısının <xref:System.Console.WriteLine%2A> string bağımsız değişkeni *enterpolasyonlu dize ifadesidir.* Bu, gömülü kod içeren bir dizeden tek bir dize (*sonuç dizesi* olarak adlandırılır) oluşturmanızı sağlayan bir şablon türüdür. Enterpolasyonlu dize ifadeleri, özellikle değerleri bir dize ye eklemek veya birkaç dizeyi birleştirmek (biraraya getirmek) için yararlıdır.


    Yukarıdaki örnekte, her enterpolasyonlu dize ifadesinin olması gereken iki öğe yer alıyor:


    - Açma tırnak işareti karakterinden önce `$` karakteriyle başlayan bir dize sabit değeri. `$` sembolü ile tırnak işareti karakteri arasında boşluk olamaz. (Bir tane eklerseniz ne olacağını görmek istiyorsanız, etkileşimli pencereye karakterden `$` sonra bir boşluk ekleyin ve güncelleştirilmiş kodu çalıştırın. C# derleyicisi “Beklenmeyen karakter ‘$’” şeklinde hata verir.)


    - Bir veya daha fazla *enterpolasyon ifadeleri*. Enterpolasyon ifadesi bir açma ve kapatma`{` `}`ayracı ile gösterilir ( ve). Ayraçlar arasında bir değer (`null` dahil) döndüren herhangi bir C# ifadesini ekleyebilirsiniz.


    Diğer bazı veri türleri ile birkaç dize enterpolasyon örnekleri deneyelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Farklı veri türleri ekleme
  durationInMinutes: 5
  content: >
    Önceki adımda, bir dizeyi diğerinin içine eklemek için dize enterpolasyonunu kullandınız. Enterpolasyonlu dize ifadesinin bir parçası olan her enterpolasyon ifadesi, ancak herhangi bir veri türünden olabilir. İnterpolated dize çeşitli veri türü ifadeleri değerlerini ekleyelim.


    Aşağıdaki örnekte, önce , , `Price`ve `perPackage` üyeleri olan `Name`bir [tuple](../../tuples.md) tanımlayın. Etkileşimli pencerede aşağıdaki kodu çalıştırın:


    ```csharp

    var item = (Name: "eggplant", Price: 1.99m, perPackage: 3);

    var date = DateTime.Now;

    Console.WriteLine($"On {date}, the price of {item.Name} was {item.Price} per {item.perPackage} items.");

    ```


    Enterpolasyon dizesinde enterpolasyon ifadesinin `item.Price` sonuç dizesinde "1,99" metnine çözüldüğünü unutmayın. Bunun nedeni, ifade sonucunun türü bir dize olmadığında, sonucun aşağıdaki şekilde bir dize yle çözülmesidir:


    - Enterpolasyon ifadesi , `null`boş bir dize (""veya <xref:System.String.Empty?displayProperty=nameWithType>) için değerlendirilirse.


    - Enterpolasyon ifadesi , genellikle `null`sonuç ifadesinin `ToString` yöntemi olarak adlandırılır.


    Bu örnekten çıktıda, tarih çok kesindir (patlıcanın fiyatı her saniye değişmez) ve fiyat değeri bir birim para birimi göstermez. Bir sonraki adımda, ifade sonuçlarının dize gösterimlerinin biçimini denetleyerek bu sorunları nasıl düzelteceğinizi öğreneceksiniz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Enterpolasyon ifadelerinin biçimlendirmesini denetleme
  durationInMinutes: 5
  content: >
    Önceki adımda, sonuç dizesine kötü biçimlendirilmiş iki dize eklenmiştir. Biri tarih ve saat değeriydi, bunlardan yalnızca tarih değeri uygundu. İkincisi, para birimini göstermeyen bir fiyattı. Her iki sorun da kolayca giderilebilir. String enterpolasyonu, belirli türlerin biçimlendirmesini denetleyen *biçim dizeleri* belirtmenizi sağlar. Aşağıdaki satırda `Console.WriteLine` gösterildiği gibi tarih ve fiyat ifadeleri için biçim dizeleri eklemek için önceki örnekten çağrıyı değiştirin:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items");

    ```


    Bir iki nokta üst üste (":") ve biçim dizesi ile enterpolasyon ifadesini izleyerek bir biçim dizesi belirtirsiniz. “d”, kısa tarih biçimini ifade eden [standart tarih ve saat biçimi dizesidir](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier). "C2", ondalık noktadan sonra iki basamaklı bir para birimi değeri olarak bir sayıyı temsil eden [standart bir sayısal biçim dizesidir.](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)


    .NET kitaplıklarında bulunan bir dizi tür, önceden tanımlanmış biçim dizeleri kümesini destekler. Bunlara tüm sayısal türlerin yanı sıra tarih ve saat türleri de dahildir. Biçim dizelerini destekleyen türlerin tam listesi için [.NET’teki Biçimlendirme Türleri](../../../standard/base-types/formatting-types.md) başlıklı makalede bulunan [Biçim Dizeleri ve .NET Sınıfı Kitaplık Türleri](../../../standard/base-types/formatting-types.md#format-strings-and-net-types) bölümüne bakın.


    Tarih ve saatin biçimlendirmesini ve sayısal değeri nasıl etkilediğini görmek için örnekteki biçim dizelerini değiştirmeyi deneyin. `{date:d}` içindeki “d”yi “t” olarak (kısa saat biçimini görüntülemek için), “y” olarak (yılı ve ayı görüntülemek için) ve “yyyy” olarak (yılı dört basamaklı sayı olarak görüntülemek için) değiştirin. `{price:C2}` içindeki “C2”yi “e” olarak (üstel gösterim için) ve “F3” olarak (ondalık ayırıcıdan sonra üç basamak içeren sayısal bir değer için) değiştirin.


    Biçimlendirmeyi denetlemeye ek olarak, sonuç dizesinde bulunan biçimlendirilmiş dizelerin alan genişliğini ve hizalanmasını da denetleyebilirsiniz. Bir sonraki adımda bunu nasıl yapacağınızı öğreneceksiniz.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Enterpolasyon ifadelerinin alan genişliğini ve hizalanmasını denetleme
  durationInMinutes: 6
  content: >
    Normalde, enterpolasyonlu dize ifadesinin sonucu dize biçimlendirilmiş olduğunda, bu dize satır aralığı veya boşluk ları izlemeden bir sonuç dizesine eklenir. Özellikle bir veri kümesiyle çalışırken, alan genişliğini ve metin hizalamasını denetlenebilmek daha okunabilir bir çıktı üretmeye yardımcı olur. Bunu görmek için aşağıdaki kodu çalıştırın:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Öğe adları sola hizalanmış, bunların miktarları ise sağa hizalanmıştır. Enterpolasyon ifadesinden sonra virgül (",") ekleyerek ve *minimum* alan genişliğini belirleyerek hizalamayı belirtirsiniz. Belirtilen değer pozitif bir sayıysa, alan doğru hizalanır. Negatif bir sayıysa, alan sol hizalıdır.


    Negatif işaretleri `{"Item",-25}` ve `{item.Key,-25}` kodu kaldırmayı deneyin ve örneği yeniden çalıştırın. Bu kez, öğe adları sağ hizalanır.


    Tek bir enterpolasyon ifadesi için bir hizalama belirtici ve biçim dizesi birleştirebilirsiniz. Bunu yapmak için önce hizalamayı, ardından bir üst üste ve biçim dizesini belirtin. Tanımlı alan genişliklerine sahip üç biçimlendirilmiş dize görüntüleyen aşağıdaki kodu deneyin:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- content: >-
    String enterpolasyon etkileşimli öğretici tamamladınız. .NET Core SDK'yı indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.NET sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz.


    Daha fazla bilgi için [String enterpolasyonuna](../../language-reference/tokens/interpolated.md)bakın.
