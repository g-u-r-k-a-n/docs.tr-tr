### YamlMime:Tutorial
title: İçindeki integral ve kayan noktalı sayıları işlemeC#
metadata:
  title: C# C#
  description: Sayısal türlerle ilgili bu öğreticide, etkileşimli olarak öğrenmek C# için tarayıcınızı kullanacaksınız. Kod yazacak C# ve kodunuzu doğrudan tarayıcıda derleyip çalıştırmanın sonuçlarını görecekeceğiz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: İçindeki dallar ve döngülerC#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: b417ba7ff340019c74b0c3430242f59d6217b07f
  ms.sourcegitcommit: f348c84443380a1959294cdf12babcb804cfa987
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 11/12/2019
  ms.locfileid: "73969362"
items:
- durationInMinutes: 1
  content: >
    Bu öğreticide, kodunuzu derleyip çalıştırmanın sonuçlarını yazmak C# C# ve görüntülemek için tarayıcınızı kullanarak etkileşimli olarak sayısal türleri öğretir. İçindeki C#sayıları ve matematik işlemlerini keşfetmenizi sağlayan bir dizi ders içerir. Bu dersler, C# dilin temellerini öğretir.
- title: Tamsayı matematiğini keşfet
  durationInMinutes: 4
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. **Odak modunu girin** düğmesini seçin. Ardından, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır**' ı seçin:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Bunu ortamınızda çalıştırıyorsanız, bunun yerine [Yerel sürümün](numbers-in-csharp-local.md) yönergelerini izlemelisiniz.


    Yalnızca tamsayılarla temel matematik işlemlerinden birini gördünüz. `int` türü bir **tamsayıyı**, pozitif veya negatif bir tam sayıyı temsil eder. Ek için `+` sembolünü kullanırsınız. Tamsayılar için diğer yaygın matematik işlemleri şunlardır:


    - çıkarma için `-`

    - Çarpma için `*`

    - Bölüm için `/`


    > [!TIP]

    > Bu etkileşimli öğreticide, etkileşimli pencerede yazdığınız kodu değiştirerek kendi kendinize araştırma yapabilirsiniz. Bu öğreticide, her adımda deneyebileceğiniz örnekler sağlanmaktadır.


    Bu farklı işlemleri inceleyerek başlayın. Bu işlemlerin her birini denemek için üçüncü satırı değiştirin. Her Düzenlemeden sonra **Çalıştır** düğmesini seçin.


    StrA


    ```csharp

    int c = a - b;

    ```


    Anda


    ```csharp

    int c = a * b;

    ```


    Bölmenin


    ```csharp

    int c = a / b;

    ```


    İsterseniz aynı satırda birden çok matematik işlemi gerçekleştirerek da deneyebilirsiniz.


    > [!TIP]

    > Keşfederken C# (veya herhangi bir programlama dilini), kod yazarken hata oluşturursunuz. **Derleyici** bu hataları bulacak ve size rapor eder. Çıktı hata iletileri içerdiğinde, nelerin düzeltileceğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kod yapısını öğrenmenize yardımcı olur.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: İşlem sırasını keşfet
  durationInMinutes: 7
  content: >
    C# Dil, matematiksel olarak öğrendiğiniz kurallarla tutarlı kurallara sahip farklı matematik işlemlerinin önceliğini tanımlar.

    Çarpma ve bölme, toplama ve çıkarma konusunda önceliklidir.

    Etkileşimli pencerede aşağıdaki kodu çalıştırarak bunu keşfedebilirsiniz:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Çıktı, çarpma 'nın ekleme işleminden önce gerçekleştirildiğini gösterir.


    Önce gerçekleştirilmesini istediğiniz işlemin veya işlemlerin çevresine parantez ekleyerek farklı bir işlem sırası zorlayabilirsiniz:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Birçok farklı işlemi birleştirerek daha fazlasını keşfedebilirsiniz. Yukarıdaki dördüncü satırı şunun gibi bir şekilde değiştirin:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Tamsayılar için ilginç bir davranış fark etmiş olabilirsiniz. Sonucun ondalık veya kesir kısmını içermesini bekleseniz bile, tam sayı bölümü her zaman bir tamsayı sonucu üretir.


    Bu davranışı görmediyseniz, aşağıdakileri deneyin:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Sonuçları görmek için yeniden **Çalıştır** ' ı seçin.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Tamsayı hassasiyetini ve limitleri keşfet
  durationInMinutes: 5
  content: >
    Bu son örnek, bu tamsayı bölümünün sonucu ne olduğunu gösterdi.

    `%` karakteri olan **Modül** işlecini kullanarak **kalanı** alabilirsiniz:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    C# Tamsayı türü matematik tamlarından farklı bir şekilde farklılık gösterir: `int` türü en az ve en fazla sınırlara sahiptir. Bu sınırları görmek için bu kodu etkileşimli pencerede çalıştırın:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Hesaplama bu sınırları aşan bir değer üretirse, bir **yetersiz** yer veya **taşma** koşulunuz vardır. Yanıt bir sınırdan diğerine kaydırılır. Bir örnek görmek için bu iki satırı etkileşimli pencereye ekleyin:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Yanıtın en düşük (negatif) tamsayıya çok yakın olduğuna dikkat edin. `min + 2`aynıdır.

    Toplama işlemi, tamsayılar için izin verilen değerleri **taşırdı** .

    Bir taşma, olası en büyük tamsayı değerinden en küçüğe "kaydırdığı için, yanıt çok büyük negatif bir sayıdır.


    `int` türü gereksinimlerinizi karşılamıyorsa kullanabileceğiniz farklı sınırlara ve duyarlığa sahip başka sayısal türler vardır. Bundan sonra bu ileri keşfedelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Double türüyle çalışma
  durationInMinutes: 5
  content: >
    `double` sayısal türü bir çift duyarlıklı kayan noktalı sayıyı temsil eder. Bu terimler sizin için yeni olabilir. **Kayan noktalı** sayı, çok büyük veya küçük olabilecek tamsayı olmayan sayıları temsil etmek için kullanışlıdır. **Çift duyarlıklı** , bu sayıların **tek duyarlığa**göre daha fazla duyarlık kullanılarak depolandığı anlamına gelir. Modern bilgisayarlarda, tek duyarlık sayılarıyla çift duyarlık kullanmak daha yaygındır.

    Keşfedelim. Etkileşimli pencerede aşağıdaki kodu deneyin ve sonucu görün:


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Yanıtın, bölümün ondalık kısmını içerdiğine dikkat edin. Double değerleri ile biraz daha karmaşık bir ifade deneyin:


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Double değerinin aralığı tamsayı değerlerinden çok daha büyüktür. Etkileşimli pencerede aşağıdaki kodu deneyin:


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Bu değerler bilimsel gösterimde yazdırılır. `E` solundaki sayı mantisinin ' dir. Sağdaki sayı, 10 ' un üssü olarak üs değeri olan sayıdır.


    Matematiği gibi ondalık sayılar gibi, içindeki Double C# değerleri de yuvarlama hataları içerebilir. Şu kodu deneyin:


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    Yinelenen `0.3` `1/3` tam olarak aynı olmadığını bilirsiniz.


    ***Sına***


    `double` türünü kullanarak büyük sayılar, küçük sayılar, çarpma ve bölme ile diğer hesaplamaları deneyin.  Daha karmaşık hesaplamalar deneyin.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Sabit nokta türleriyle çalışma
  durationInMinutes: 8
  content: >
    Temel sayısal türleri C#: tamsayılar ve Double değerleri ile gördünüz.  Öğreneceğinizi bir başka tür vardır: `decimal` türü. `decimal` türü daha küçük bir aralığa sahiptir, ancak `double`daha fazla duyarlığa sahiptir. **Sabit nokta** terimi, ondalık noktanın (veya ikili noktanın) taşınmayacağı anlamına gelir. Şimdi bir göz atalım:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Aralığın `double` türünden küçük olduğuna dikkat edin. Aşağıdaki kodu deneyerek ondalık türüyle daha büyük duyarlık görebilirsiniz:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Sayıların `M` soneki, bir sabit 'in `decimal` türünü kullanması gerektiğini gösterir.


    Ondalık türü kullanan matematik, ondalık noktanın sağında daha fazla basamağa sahip olduğuna dikkat edin.


    ***Sına***


    Farklı sayısal türleri gördüğünüze göre, yarıçapı 2,50 santimetre olan bir dairenin alanını hesaplayan bir kod yazın. Bir daire alanının, Radius ile çarpıldığı bir daire olduğunu unutmayın. Bir ipucu: .NET, bu değer için kullanabileceğiniz <xref:System.Math.PI?displayProperty=nameWithType> PI için bir sabit içerir.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.


    19 ila 20 arasında bir yanıt almanız gerekir.
- title: Sınama Tamam
  durationInMinutes: 1
  content: >
    Bunun gibi bir konuyla karşılaştınız mı?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    İsterseniz başka formüller de deneyin.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- content: "\"Numaraları C#\" Etkileşimli öğreticiden tamamladınız. Sonraki etkileşimli öğreticiye başlamak için aşağıdaki **dallar ve döngüler** bağlantısını seçebilir veya [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret ederek .NET Core SDK indirebilir, makinenizde bir proje oluşturabilir ve kodlamaya devam edebilirsiniz. \"Sonraki adımlar\" bölümü, sizi bu öğreticilere geri getirir.\n\nAşağıdaki konularda, içindeki C# numaralar hakkında daha fazla bilgi edinebilirsiniz:\n\n- [Integral sayısal türleri](../../language-reference/builtin-types/integral-numeric-types.md)\n- [Kayan nokta sayısal türleri](../../language-reference/builtin-types/floating-point-numeric-types.md)\n- [Yerleşik sayısal dönüşümler](../../language-reference/builtin-types/numeric-conversions.md)"
