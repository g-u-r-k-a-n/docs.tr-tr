### YamlMime:Tutorial
title: Genel liste türünü kullanarak veri koleksiyonlarını yönetmeyi öğrenin
metadata:
  title: Veri koleksiyonları - C# interaktif öğreticiye giriş
  description: Bu eğitimde, C# etkileşimli olarak öğrenmek için tarayıcınızı kullanırsınız. C# kodu yazacak ve kodunuzu doğrudan tarayıcınızda derleyip çalıştırmanın sonuçlarını göreceksiniz.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f7fd68120defbfcda6ac11e14bc749bf4d69c109
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969383"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici c# kodu yazmak ve kodunuzu derleme ve çalıştırma sonuçlarını görmek için tarayıcınızı kullanarak, interaktif C # öğretir. Koleksiyonları ve dizileri oluşturan, değiştiren ve keşfeden bir dizi ders içerir.
- title: Liste oluşturma
  durationInMinutes: 2
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Odak **modunu gir düğmesini** seçin. Ardından, etkileşimli pencereye aşağıdaki kod `<name>` bloğunu yazın (adınız ile değiştirin) ve **Çalıştır'ı**seçin:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Bunu ortamınızda çalıştırıyorsanız, bunun yerine yerel [sürüm](arrays-and-collections.md) için yönergeleri izlemeniz gerekir.


    Dizeleri bir liste oluşturdunuz, bu listeye üç ad eklediniz ve tüm CAPS'lerde adları yazdırdın. Listeyi gözden geçirmek için önceki öğreticilerde öğrendiğiniz kavramları kullanıyorsunuz.


    Adları görüntülemek için kod [dize enterpolasyon](../../language-reference/tokens/interpolated.md) özelliğini kullanır. `$` Karakterle bir `string` önce olduğunuzda, dize bildirimine C# kodunu katıştırabilirsiniz. Gerçek dize, c# kodunu oluşturduğu değerle değiştirir. Bu örnekte, `{name.ToUpper()}` <xref:System.String.ToUpper%2A?displayProperty=nameWithType> yöntemi çağırdığınız için büyük harfe dönüştürülen her adla değiştirilir.


    Keşfetmeye devam edelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Liste içeriğini değiştirme
  durationInMinutes: 3
  content: >
    Oluşturduğunuz koleksiyon <xref:System.Collections.Generic.List%601> türünü kullanır. Bu tür öğelerin dizileri depolar. Açı braketleri arasındaki öğelerin türünü belirtirsiniz.


    Bu <xref:System.Collections.Generic.List%601> türün önemli bir yönü, öğeleri eklemenize veya kaldırmanıza olanak sağlayarak büyüyebilir veya küçülebilir. İçeriğini görüntüledikten sonra içeriği değiştirerek sonuçları görebilirsiniz. Daha önce yazdığınız kodun altına aşağıdaki kodu ekleyin (içeriği yazdıran döngünün altına):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Listenin sonuna iki ad daha eklediniz. Bir tanesini de kaldırdın. Bu kod bloğundan gelen çıktı ilk içeriği gösterir, sonra boş bir satır ve yeni içerik yazdırır.


    <xref:System.Collections.Generic.List%601> Dizin bazında tek tek **index** öğelere başvurmanızı sağlar. Öğeleri `[` ve `]` belirteçleri kullanarak erişebilirsiniz. Daha önce yazdığınız kodun altına aşağıdaki kodu ekleyin ve deneyin:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Listenin sonuna kadar erişemenize izin verilmiyor. Listenin <xref:System.Collections.Generic.List%601.Count%2A> özelliği ne kadar süreyle kullandığını kontrol edebilirsiniz. Denemek için aşağıdaki kodu ekleyin:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Sonuçları görmek için Yeniden **Çalıştır'ı** seçin. C#'da endeksler 0'dan başlar, bu nedenle en büyük geçerli dizin listedeki madde sayısından bir azdır.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Listeleri arama ve sıralama
  durationInMinutes: 5
  content: >
    Örneklerimiz nispeten küçük listeler kullanır, ancak uygulamalarınız genellikle daha fazla öğeiçeren listeler oluşturabilir ve bazen binlercesini numaralandırmak gerekir. Bu büyük koleksiyonlarda öğeleri bulmak için, farklı öğeler için listearama nız gerekir. Yöntem <xref:System.Collections.Generic.List%601.IndexOf%2A> bir öğeyi arar ve öğenin dizinini döndürür. Nasıl çalıştığını görmek için deneyin.  Şimdiye kadar yazdıkların altına aşağıdaki kodu ekleyin:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Bir öğenin listede olup olmadığını bilmiyor olabilirsiniz, bu nedenle <xref:System.Collections.Generic.List%601.IndexOf%2A>her zaman tarafından döndürülen dizini kontrol etmelisiniz. -1 ise, öğe bulunamadı.


    Listenizdeki öğeler de sıralanabilir. Yöntem, <xref:System.Collections.Generic.List%601.Sort%2A> listedeki tüm öğeleri normal sıralarına göre sıralar (dizeleri durumunda alfabetik olarak). Bu kodu ekleyin ve yeniden çalıştırın:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Diğer türler deki listeler
  durationInMinutes: 5
  content: >
    Şu ana kadar `string` listelerdeki türü kullanıyorsunuz. Farklı bir <xref:System.Collections.Generic.List%601> tür kullanarak yapalım. Bir dizi sayı oluşturalım. Şimdiye kadar yazdığınız kodu silin ve aşağıdaki kodla değiştirin:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Bu, tamsayılar listesi oluşturur ve ilk iki tamsayıdeğerini 1 değerine ayarlar. *Fibonacci Dizisi*, sayıların bir dizi, iki 1s ile başlar. Sonraki her Fibonacci numarası önceki iki sayının toplamı alınarak bulunur. Şu kodu ekleyin:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Sonuçları görmek için **Çalıştır'a** basın;


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Sınama
  durationInMinutes: 10
  content: >
    Bu ve daha önceki derslerden bazı kavramları bir araya getirebilecek olup olmadığını görün. Fibonacci Numbers ile şimdiye kadar inşa ettiğiniz şeyi genişletin. Sırayla ilk 20 sayıoluşturmak için kodu yazmaya çalışın. (İpucu olarak, 20 Fibonacci sayısı 6765'tir.)


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- title: Görevi tamamlama
  durationInMinutes: 3
  content: >
    Şunun gibi bir şeyle karşılaştınız mı?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Döngünün her yinelemesinde, listedeki son iki sondayı alıp, bunları özetliyor ve bu değeri listeye ekliyorsunuz. Listeye 20 öğe ekleyene kadar döngü yineler.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi, önizleme modundadır. Sorunla karşılaşırsanız lütfen [dotnet üzerinde bildirin/depoyu deneyin](https://github.com/dotnet/try/issues).
- content: >-
    İnteraktif öğretici listesini tamamladınız. Bu C# interaktif öğretici için son giriş. .NET Core SDK'yı indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.NET sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz. "Sonraki adımlar" bölümü sizi bu öğreticilere geri getirir.


    [.NET koleksiyonları](../../../standard/collections/index.md) hakkında daha fazla bilgi için aşağıdaki makalelerde bilgi edinebilirsiniz:

    - [Koleksiyon türünü seçme](../../../standard/collections/selecting-a-collection-class.md)

    - [Yaygın olarak kullanılan koleksiyon türleri](../../../standard/collections/commonly-used-collection-types.md)

    - [Genel koleksiyonların ne zaman kullanılacağı](../../../standard/collections/when-to-use-generic-collections.md)
